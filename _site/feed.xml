<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kaixo, i&#39;m smith.</title>
    <description>This is a collection of some random thoughts, #TILs, and some tips for myself.
</description>
    <link>http://seimith.github.io/</link>
    <atom:link href="http://seimith.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 23 Dec 2016 12:06:46 -0800</pubDate>
    <lastBuildDate>Fri, 23 Dec 2016 12:06:46 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>(Swift) zIndex zPosition</title>
        <description>&lt;p&gt;I’m a web person, and I almost always think web first.&lt;/p&gt;

&lt;p&gt;With CSS there’s a property called &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt; and it’s responsible for positioning elements on the &lt;code class=&quot;highlighter-rouge&quot;&gt;z plane&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In iOS, there’s an analogous property on the layer of elements that you can augment called, &lt;code class=&quot;highlighter-rouge&quot;&gt;zPostion&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yourThingHere.layer.zPosition = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/zposition/snippet/2016/12/23/Swift-zIndex-zPosition.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/zposition/snippet/2016/12/23/Swift-zIndex-zPosition.html</guid>
        
        
        <category>swift</category>
        
        <category>zPosition</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Custom Segue</title>
        <description>&lt;p&gt;This tutorial will demonstrate how to add a custom segue to your Swift app.&lt;/p&gt;

&lt;p&gt;There are a few generic segues that are available to use in Xcode, however, you might be in a situation where you need specific transitions that might be better suited for gestures.&lt;/p&gt;

&lt;p&gt;In this case, the animation in play will be a sliding one (great for swiping).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/CustomSegue.gif&quot; alt=&quot;alt text&quot; title=&quot;Custom segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create swift project&lt;/strong&gt;
Create a “Single View Application” project. If you don’t want extra folders in your project for testing, make sure you uncheck the items for tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/1.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a single page application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/2.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a single page application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create your segue&lt;/strong&gt;
I made a bit of a mistake here in naming my class with lowercase, “firstCustomSegue”. However, this example works just find.&lt;/p&gt;

&lt;p&gt;Make sure to select &lt;code class=&quot;highlighter-rouge&quot;&gt;UIStoryboardSegue&lt;/code&gt; as the subclass and Swift as the language.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/3.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a new file for your segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/4.png&quot; alt=&quot;alt text&quot; title=&quot;Naming your segue file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following is the code + comments for the custom segue explaining each section.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class firstCustomSegue: UIStoryboardSegue {
    override func perform() {
        // Declare the INITAL view and the DESTINATION view
        // This will break and be nil if you don&#39;t have a second view controller for your DESTINATION view
        let initalView = self.source.view as UIView!
        let destinationView = self.destination.view as UIView!

        // Specify the screen HEIGHT and WIDTH
        let screenHeight = UIScreen.main.bounds.size.height
        let screenWidth = UIScreen.main.bounds.size.width

        // Specify the INITIAL PLACEMENT of the DESTINATION view
        initalView?.frame = CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight)
        destinationView?.frame = CGRect(x: screenWidth, y: 0, width: screenWidth, height: screenHeight)

        // Access the app&#39;s key window and add the DESTINATION view ABOVE the INITAL view
        let appWindow = UIApplication.shared.keyWindow
        appWindow?.insertSubview(destinationView!, aboveSubview: initalView!)

        // Animate the segue&#39;s transition
        UIView.animate(withDuration: 0.4, animations: {
            // Left/Right
            initalView?.frame = (initalView?.frame.offsetBy(dx: -screenWidth, dy: 0))!
            destinationView?.frame = (destinationView?.frame.offsetBy(dx: -screenWidth, dy: 0))!
        }) { (Bool) in
            self.source.present(self.destination, animated: false, completion: nil)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Create a second view controller&lt;/strong&gt;
When you initially create your Swift app, you get a boilerplate set of files. One of them is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt;. We’re going to use this view controller, but in addition to this view controller we need to create another view controller for another view that we also need to make. &lt;code class=&quot;highlighter-rouge&quot;&gt;:-} in next step&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case, the new view controller that I’ve created here is called &lt;code class=&quot;highlighter-rouge&quot;&gt;SecondViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to update the subclass to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You don’t need to add anything in the second view controller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/5.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a new view controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Add a second UIView controller to the storyboard&lt;/strong&gt;
Now that I’ve created a second view controller I need to add a new view controller.&lt;/p&gt;

&lt;p&gt;This can be done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt; and by searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;View Controller&lt;/code&gt; and dragging it onto the board.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/6.png&quot; alt=&quot;alt text&quot; title=&quot;Adding a second UIView controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you do that you need to reassign the view controller “controlling” that new view.&lt;/p&gt;

&lt;p&gt;Make sure you update the class to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SecondViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/13.png&quot; alt=&quot;alt text&quot; title=&quot;Reassigning the controller for the new UIView controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Differentiating the scenes, adding a button and its constraints&lt;/strong&gt;
Here, I’ve added different background colors to my views so I can visually differentiate the two scenes that I want to segue between.&lt;/p&gt;

&lt;p&gt;I’ve also added a button such that I can use it to trigger my custom segue. You can totally add gesture recognizers here, but that’s for another time. &lt;code class=&quot;highlighter-rouge&quot;&gt;:)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In terms of constraints, I’ve added a total of 4 constraints to my button:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Height&lt;/li&gt;
  &lt;li&gt;Width&lt;/li&gt;
  &lt;li&gt;Horizontally in Container&lt;/li&gt;
  &lt;li&gt;Vertically in Container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/7.png&quot; alt=&quot;alt text&quot; title=&quot;Adding constraints: height, width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/8.png&quot; alt=&quot;alt text&quot; title=&quot;Adding constraints: horizontal, vertical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Setting the custom segue&lt;/strong&gt;
This is where you finally add the segue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/9.png&quot; alt=&quot;alt text&quot; title=&quot;Setting the custom segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On a Mac, &lt;code class=&quot;highlighter-rouge&quot;&gt;control + click + drag&lt;/code&gt;, from the button to the second view controller and you will get &lt;code class=&quot;highlighter-rouge&quot;&gt;Action Segue&lt;/code&gt; selections.&lt;/p&gt;

&lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom&lt;/code&gt;. (Although I see my custom segue class name in the list, &lt;code class=&quot;highlighter-rouge&quot;&gt;first custom&lt;/code&gt;, selecting this has not worked for me.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/11.png&quot; alt=&quot;alt text&quot; title=&quot;Selecting your custom segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, click on the segue representation on the storyboard (the thing with the bracket icon connecting the two view controllers) and remember to update the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identifier&lt;/li&gt;
  &lt;li&gt;Class&lt;/li&gt;
  &lt;li&gt;Kind (should already be &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/12.png&quot; alt=&quot;alt text&quot; title=&quot;Updating segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that should be it. When you load your simulator you should be able to segue by “sliding” between two scenes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftCustomSegues&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 05 Nov 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/segue/transitions/animation/2016/11/05/Swift-Custom-Segue.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/segue/transitions/animation/2016/11/05/Swift-Custom-Segue.html</guid>
        
        
        <category>swift</category>
        
        <category>segue</category>
        
        <category>transitions</category>
        
        <category>animation</category>
        
      </item>
    
      <item>
        <title>(Swift) UIImage to Base64</title>
        <description>&lt;p&gt;I recently had a project where I needed to convert my image to base64. With JavaScript it’s relatively easy and since I was new to Swift I had no idea how to do this.&lt;/p&gt;

&lt;p&gt;Below, I obtain my image as a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;, then convert it into NSData, and then into base64.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let image = ...UIImage(CGImage: cgImageRef!, scale: 1.0, orientation: UIImageOrientation.Right)...
 
// Turn UIImage into Base64
let imageNSData = UIImageJPEGRepresentation(image, 0.05)
let base64String = imageNSData!.base64EncodedStringWithOptions(.Encoding64CharacterLineLength)

print(&quot;Base64?&quot;, base64String)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can use &lt;a href=&quot;http://codebeautify.org/base64-to-image-converter&quot;&gt;http://codebeautify.org/base64-to-image-converter&lt;/a&gt; to test the base64 image.&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Oct 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/snippet/2016/10/30/Swift-UIImage-to-Base64.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/snippet/2016/10/30/Swift-UIImage-to-Base64.html</guid>
        
        
        <category>swift</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>Unable to run gem install XYZ on OS X El Capitan</title>
        <description>&lt;p&gt;If you’ve upgraded your computer to El Capitan and you’re getting errors while trying to install some gems, this is due to  El Capitan’s introduction of SIP (System Integrity Protection).&lt;/p&gt;

&lt;p&gt;Read more about SIP here: &lt;a href=&quot;https://support.apple.com/en-us/HT204899&quot;&gt;https://support.apple.com/en-us/HT204899&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other day I was trying to run &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; and got a permissions error. Not cool.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler

Fetching: bundler-1.13.6.gem (100%)
ERROR:  While executing gem ... (Gem::FilePermissionError)
You don&#39;t have write permissions for the /usr/bin directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Try installing to your directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler -n /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 29 Oct 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/gem/el%20capitan/install/troubleshoot/2016/10/29/Unable-to-on-OS-X-El-Capitan.html</link>
        <guid isPermaLink="true">http://seimith.github.io/gem/el%20capitan/install/troubleshoot/2016/10/29/Unable-to-on-OS-X-El-Capitan.html</guid>
        
        
        <category>gem</category>
        
        <category>el capitan</category>
        
        <category>install</category>
        
        <category>troubleshoot</category>
        
      </item>
    
      <item>
        <title>(Swift) Sliding UIView</title>
        <description>&lt;p&gt;Today we’re going to make a sliding UIView. Similar to the previous post, this tutorial is also very similar to my prievious post about &lt;a href=&quot;http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html&quot; title=&quot;Post on rotating UIViews&quot;&gt;rotating UIViews&lt;/a&gt;, but this is how to do a sliding animation. You might need this type of animation for opening a menu or showing an alert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-10-01-assets/slidingUIViewSm.gif&quot; alt=&quot;alt text&quot; title=&quot;Sliding UIViews&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 2.2&lt;/li&gt;
  &lt;li&gt;Xcode Version 7.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1 to 4: Create swift project, set up your storyboard, add constraints, and connect your outlets&lt;/strong&gt;
The steps to set up this project this is pretty much the same as the &lt;a href=&quot;http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html&quot; title=&quot;Post on rotating UIViews&quot;&gt;rotating UIViews&lt;/a&gt; post, so check it out first. After that, you can just augment &lt;strong&gt;Step 5&lt;/strong&gt; to make your UIView slide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side Note&lt;/strong&gt;: What’s different from this and the previous tutorials are the constraints that I added to the UIView. However, it doesn’t really matter… :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Add code to slide&lt;/strong&gt;
In this example, we’re adding animation to slide a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; once the app loads. To do that, we’ll create a function, then call that function within the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; lifecycle function.&lt;/p&gt;

&lt;p&gt;This is the function that contains the animation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func beginAnimation () {
  // 1st transformation
  self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, -100)

  UIView.animateWithDuration(0.4, delay: 0, options: [.CurveEaseInOut], animations: {
      // 2nd transformation
      self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 50)
      }, completion: { completion in
          UIView.animateWithDuration(0.2, delay: 0.0, options: [.CurveEaseInOut], animations: {
              // 3rd transformation
              self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 0)
          }, completion: nil)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this example, I’ve got 3 transformations because the animation that I’m going for is a slide+little bump+short slide to position.&lt;/p&gt;

&lt;p&gt;The first transformation is the starting position, and here, I’ve got it set above the visible viewport at &lt;code class=&quot;highlighter-rouge&quot;&gt;-100&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, -100)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second transformation brings the UIView into the view, and with the “.CurveEaseInOut” option will give this a snappiness at &lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 50)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally, the third transformation, I have it in the completion block, and this will bring the UIView up and make it look like it “bumps” into it’s final position at &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 0)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the code in your &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; to start the pulse&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.beginAnimation()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your file should look similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {
  @IBOutlet weak var uiViewToSlide: UIView!

  override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
    self.beginAnimation()
  }

  override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
  }

  func beginAnimation() {
    self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, -100)

    UIView.animateWithDuration(0.4, delay: 0, options: [.CurveEaseInOut], animations: {
      self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 50)
      }, completion: { completion in
        UIView.animateWithDuration(0.2, delay: 0.0, options: [.CurveEaseInOut], animations: {
          self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 0)
        }, completion: nil)
    })

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that should be it. When you reload your simulator you should see a pulsating pink square!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftSlidingUIView&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/10/01/Swift-Sliding-UIView.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/10/01/Swift-Sliding-UIView.html</guid>
        
        
        <category>swift</category>
        
        <category>uiview</category>
        
        <category>views</category>
        
        <category>tutorial</category>
        
        <category>animation</category>
        
      </item>
    
      <item>
        <title>(Swift) Pulsating UIView</title>
        <description>&lt;p&gt;This tutorial is very similar to my prievious post about &lt;a href=&quot;http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html&quot; title=&quot;Post on rotating UIViews&quot;&gt;rotating UIViews&lt;/a&gt;, but this is how to do pulsating animations. You might need this type of animation for a loader, an onTap of a button, or whatever.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-09-18-assets/pulsatingUIView.gif&quot; alt=&quot;alt text&quot; title=&quot;Rotating UIViews&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 2.2&lt;/li&gt;
  &lt;li&gt;Xcode Version 7.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1 to 4: Create swift project, set up your storyboard, add constraints, and connect your outlets&lt;/strong&gt;
The steps to set up this project this is pretty much the same as the &lt;a href=&quot;http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html&quot; title=&quot;Post on rotating UIViews&quot;&gt;rotating UIViews&lt;/a&gt; post, so check it out first. After that, you can just augment &lt;strong&gt;Step 5&lt;/strong&gt; to make your UIView pulse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Add code to pulse&lt;/strong&gt;
In this example, we’re adding animation to pulse a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; once the app loads. To do that, we’ll create a function, then call that function within the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; lifecycle function.&lt;/p&gt;

&lt;p&gt;This is the function that contains the animation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func beginAnimation () {
  // code for animation
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are a couple of ways to animate your UIView to make it pulse. Below are 3 examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version 1: Pulsate 3x&lt;/strong&gt;
I haven’t used this technique to animate things in my personal projects so I don’t have any strong opinions as to whether or not it’s a better way to animate, but here it is…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let scaleAnimation:CABasicAnimation = CABasicAnimation(keyPath: &quot;transform.scale&quot;)
scaleAnimation.duration = 1.0
scaleAnimation.repeatCount = 3.0
scaleAnimation.autoreverses = true
scaleAnimation.fromValue = 1.0;
scaleAnimation.toValue = 1.2;
self.uiViewToPulsate.layer.addAnimation(scaleAnimation, forKey: &quot;scale&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Version 2: To Pulse Forever&lt;/strong&gt;
This is how I’ve learned to animate. I’ve selected &lt;code class=&quot;highlighter-rouge&quot;&gt;.animateWithDuration&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt; and this allows me to specify that I want my UIView to repeat and then reverse after the first loop by pluggin in an array.&lt;/p&gt;

&lt;p&gt;If I were to just pass &lt;code class=&quot;highlighter-rouge&quot;&gt;.Repeat&lt;/code&gt; as the only thing in &lt;code class=&quot;highlighter-rouge&quot;&gt;options&lt;/code&gt;, my UIView would keep on growing from its original size to &lt;code class=&quot;highlighter-rouge&quot;&gt;1.2&lt;/code&gt; and then jarringly start over and over again.&lt;/p&gt;

&lt;p&gt;Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.Autoreverse&lt;/code&gt; will perform the reverse of the animation and help make the transitions be smoother.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt; block is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; because I want my UIView to animate forever. Nobody would want their UIView to animate forever, but for this example why not?&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIView.animateWithDuration(1.0, delay:0, options: [.Repeat, .Autoreverse], animations: {
    self.uiViewToPulsate.transform = CGAffineTransformMakeScale(1.2, 1.2)
}, completion: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Version 3: Pulsate 3x&lt;/strong&gt;
This is similar to the code above except for the extra line &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView.setAnimationRepeatCount(3)&lt;/code&gt; and the lines in the completion block.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIView.setAnimationRepeatCount(3)&lt;/code&gt; is what you’d use to set the number of times you want you animation to run for.&lt;/p&gt;

&lt;p&gt;Then, the &lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt; block is important to have to make the animation “reset” to it’s original size smoothly. If I were to have the block be &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; like in the code above, after 3 animation rounds the UIView would stop abruptly at size 1.2x.&lt;/p&gt;

&lt;p&gt;Having &lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToPulsate.transform = CGAffineTransformMakeScale(1, 1)&lt;/code&gt; within the &lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt; block makes it such that once the animation is completed, the UIView will transition to it’s original size at 1x.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UIView.animateWithDuration(1.0, delay:0, options: [.Repeat, .Autoreverse], animations: {
    UIView.setAnimationRepeatCount(3)
    self.uiViewToPulsate.transform = CGAffineTransformMakeScale(1.2, 1.2)

    }, completion: {completion in
        self.uiViewToPulsate.transform = CGAffineTransformMakeScale(1, 1)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add the code in your &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; to start the pulse&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.beginAnimation()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your file should look similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

  // 1. We just added this IBOutlet
  @IBOutlet weak var uiViewToPulsate: UIView!

  override func viewDidLoad() {
    super.viewDidLoad()

    // 3. Starting animation when app loads
    self.beginAnimation()
  }

  override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
  }

  // 2. Function to pulse 3x
  func beginAnimation () {
      UIView.animateWithDuration(1.0, delay:0, options: [.Repeat, .Autoreverse], animations: {
          UIView.setAnimationRepeatCount(3)
          self.uiViewToPulsate.transform = CGAffineTransformMakeScale(1.2, 1.2)
          }, completion: {completion in
              self.uiViewToPulsate.transform = CGAffineTransformMakeScale(1, 1)
      })

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that should be it. When you reload your simulator you should see a pulsating pink square!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftPulsatingUIView&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Sep 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/09/18/Swift-Pulsating-UIView.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/09/18/Swift-Pulsating-UIView.html</guid>
        
        
        <category>swift</category>
        
        <category>uiview</category>
        
        <category>views</category>
        
        <category>tutorial</category>
        
        <category>animation</category>
        
      </item>
    
      <item>
        <title>Gif Capturing App (GIPHY)</title>
        <description>&lt;p&gt;I wanted to give a shoutout to a cool app that I recently downloaded from the app store. It’s called GIPHY and I use it to create gifs of what I’m doing.&lt;/p&gt;

&lt;p&gt;It has a super simple user interface and thus is very intuitive to use.&lt;/p&gt;

&lt;p&gt;There is an editing feature and it is super simple! It has options to cut the beginning and end of your gif, how to loop it, what size you want your gif to be, and how many frames per second you want your gif to be.&lt;/p&gt;

&lt;p&gt;I totally recommend it! &lt;a href=&quot;https://itunes.apple.com/us/app/giphy-capture.-the-gif-maker/id668208984?mt=12&quot; title=&quot;GIPHY&quot;&gt;Get GIPHY on iTunes!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-09-11-assets/img2.png&quot; alt=&quot;alt text&quot; title=&quot;GIPHY app&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Sep 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/app/gif/2016/09/11/Gif-Capturing-App.html</link>
        <guid isPermaLink="true">http://seimith.github.io/app/gif/2016/09/11/Gif-Capturing-App.html</guid>
        
        <category>ahhhhrealmonsters</category>
        
        
        <category>app</category>
        
        <category>gif</category>
        
      </item>
    
      <item>
        <title>(Swift) Specifiying By Tags</title>
        <description>&lt;p&gt;In Swift, you can add items to your storyboard and refer to it in your code. For example, you can add a UIButton and then create an IBOutlet in your code to “connect” to it.&lt;/p&gt;

&lt;p&gt;Another way to do this is by giving it a tag number. Although this way might not be the best way to “grab” and assign things because I feel like it’s very thinking to assigning an ID to a tag in web development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 2.2&lt;/li&gt;
  &lt;li&gt;Xcode Version 7.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To give your item a tag,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Click on your item
&amp;gt; Select &quot;Attributes Inspector&quot; in your &quot;Utilities&quot;panel (this is the wedge-looking icon)
&amp;gt; Scroll down to find the &quot;View&quot; section and find the &quot;Tag&quot; field
&amp;gt; Give it a unique number
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-09-11-assets/img1.png&quot; alt=&quot;alt text&quot; title=&quot;Giving a UIView a tag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you assign something with a tag you can then look it up by that tag and then augment it.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if let theLabel = self.view.viewWithTag(1) as? UILabel {
	theLabel.text = &quot;I&#39;m replacing text here&quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 10 Sep 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/uiview/views/tutorial/tags/2016/09/10/Swift-Specifiying-By-Tags.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uiview/views/tutorial/tags/2016/09/10/Swift-Specifiying-By-Tags.html</guid>
        
        
        <category>swift</category>
        
        <category>uiview</category>
        
        <category>views</category>
        
        <category>tutorial</category>
        
        <category>tags</category>
        
      </item>
    
      <item>
        <title>(Swift) Rotating UIView</title>
        <description>&lt;p&gt;This tutorial is about spinning UIViews. Why spinning things you might ask? Animations can be (for a lack of better terminology because I hate this word) delightful for users.&lt;/p&gt;

&lt;p&gt;Anywho, you might just need to animate a loading spinner thing or something for you app.&lt;/p&gt;

&lt;p&gt;In this case, I’ve just created a few UIViews and added animation to it. If you want, you can even just use a UIImage component and spin that instead.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/RotatingUIViewSmall.gif&quot; alt=&quot;alt text&quot; title=&quot;Rotating UIViews&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 2.2&lt;/li&gt;
  &lt;li&gt;Xcode Version 7.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create swift project&lt;/strong&gt;
Create a “Single View Application” project. If you don’t want extra folders in your project for testing, make sure you uncheck the items for tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img1.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a single page application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Add &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; to storyboard&lt;/strong&gt;
Search up the UIView component in the bottom left corner of Xcode and drag it into your storyboard.&lt;/p&gt;

&lt;p&gt;After adding the component to your storyboard, change it’s color so that you can see it. It will default to white which can be difficult to see.&lt;/p&gt;

&lt;p&gt;If you run this in the simulator at this point, all sorts of misalignments will happen here. This is because there are no constraints.
&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img2.png&quot; alt=&quot;alt text&quot; title=&quot;Drag in a UIView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Add constraints&lt;/strong&gt;*
The first set of constraints that we’ll add here are “horizontal” and “vertical” constraints.&lt;/p&gt;

&lt;p&gt;To do this make sure you have your UIView selected and then locate the icon at the bottom left of Xcode (look for the icon that look like sideways bar graphs). Then, check off the corresponding checkboxes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img3.png&quot; alt=&quot;alt text&quot; title=&quot;Add aligning constraints to UIView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second set of constraints will be to give it a “width” and “height” constraint. To do this you need to find the square “Tie-fighter” icon at the bottom left of Xcode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img4.png&quot; alt=&quot;alt text&quot; title=&quot;Add width and height constraints to UIView&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you add these two sets of constraints you’ll get a warning in the “Document Outline Panel”. Resolve these warnings as it will fix the placement of your UIView in your storyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img5.gif&quot; alt=&quot;alt text&quot; title=&quot;Fix constraint warnings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point if you run this in the simulator you’ll see that the UIView is centered in the middle of the screen in all rotations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img6.gif&quot; alt=&quot;alt text&quot; title=&quot;Simulator of UIView in the middle of the device&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create and connect IBOutlets to your controller&lt;/strong&gt;
Now that you have your UIView set up, it’s time to create an “IBOutlet”. This is kind of like a variable that exists in the “Interface Builder” and gets connected to your code.&lt;/p&gt;

&lt;p&gt;There are multiple ways of creating an “IBOutlet”. These are the two ways that I create them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Version 1&lt;/em&gt;&lt;/strong&gt; You want to add an &lt;code class=&quot;highlighter-rouge&quot;&gt;@IBOutlet&lt;/code&gt; in your view controller.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Open `ViewController.swift` file
- Add “@IBOutlet weak var mySpinnerView: UIView!” to the class
- Go to the storyboard to connect UIView w/ IBOUTLET
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your code should look something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

	@IBOutlet weak var mySpinnerView: UIView!

	override func viewDidLoad() {
		super.viewDidLoad()
		// Do any additional setup after loading the view, typically from a nib.
	}

	override func didReceiveMemoryWarning() {
		super.didReceiveMemoryWarning()
		// Dispose of any resources that can be recreated.
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should also notice that there is a tiny unfilled dot next to your &lt;code class=&quot;highlighter-rouge&quot;&gt;IBOutlet&lt;/code&gt;. This means that this outlet is not connected to anything in your storyboard.&lt;/p&gt;

&lt;p&gt;To connect your newly created &lt;code class=&quot;highlighter-rouge&quot;&gt;IBOutlet&lt;/code&gt; go back to your storyboard and then click on your view controller. Make sure you have your &lt;code class=&quot;highlighter-rouge&quot;&gt;Utilities&lt;/code&gt; panel (right panel icon) open. Here, you will see that there is a list of outlets with unfilled dots as well. This is where you can click + drag to connect them. The dot should now be filled in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img7.png&quot; alt=&quot;alt text&quot; title=&quot;Connect IBOutlet from utilities panel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Version 2&lt;/em&gt;&lt;/strong&gt; Open your storyboard and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Show Assistant Editor&lt;/code&gt; (this is the venn-diagram-looking icon in the top of Xcode).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ctrl + Click drag the UIView into your class and then name it. The dot should not be filled in.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img8.png&quot; alt=&quot;alt text&quot; title=&quot;Connect IBOutlet from your storyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-08-28-assets/img9.png&quot; alt=&quot;alt text&quot; title=&quot;Connect IBOutlet from your storyboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Add code to rotate forever&lt;/strong&gt;
In this example, we’re adding animation to spin a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; once the app loads. To do that, we’ll create a function, then call that function within the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; lifecycle function.&lt;/p&gt;

&lt;p&gt;This is the function that contains the animation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func beginAnimation () {
	UIView.animateWithDuration(1.0, delay: 0, options: .CurveLinear, animations: { () -&amp;gt; Void in
		self.mySpinnerView.transform = CGAffineTransformRotate(self.mySpinnerView.transform, CGFloat(M_PI))
	}) { (finished) -&amp;gt; Void in
		self.beginAnimation()
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add code in your &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; to start the spinning&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.beginAnimation()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your file should look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {

	// 1. We just added this IBOutlet
	@IBOutlet weak var mySpinnerView: UIView!

	override func viewDidLoad() {
		super.viewDidLoad()

		// 3. Starting animation when app loads
		self.beginAnimation()
	}

	override func didReceiveMemoryWarning() {
		super.didReceiveMemoryWarning()
		// Dispose of any resources that can be recreated.
	}

	// 2. Function to spin foreverrrr
	func beginAnimation () {
		UIView.animateWithDuration(1.0, delay: 0, options: .CurveLinear, animations: { () -&amp;gt; Void in
			self.mySpinnerView.transform = CGAffineTransformRotate(self.mySpinnerView.transform, CGFloat(M_PI))
		}) { (finished) -&amp;gt; Void in
			self.beginAnimation()
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that should be it. When you reload your simulator you should see a rotating pink square. Play around and add more spinning things!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftRotatingUIView&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 28 Aug 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html</guid>
        
        
        <category>swift</category>
        
        <category>uiview</category>
        
        <category>views</category>
        
        <category>tutorial</category>
        
        <category>animation</category>
        
      </item>
    
      <item>
        <title>Free Public Apis</title>
        <description>&lt;p&gt;So if you need to make a project and you wanted to incorporate an API, check out &lt;a href=&quot;https://github.com/toddmotto/public-apis&quot;&gt;https://github.com/toddmotto/public-apis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Wicked cool list of free shit!&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Aug 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/api/freebie/2016/08/21/Free-Public-Apis.html</link>
        <guid isPermaLink="true">http://seimith.github.io/api/freebie/2016/08/21/Free-Public-Apis.html</guid>
        
        
        <category>api</category>
        
        <category>freebie</category>
        
      </item>
    
  </channel>
</rss>
