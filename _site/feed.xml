<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaixo! It&#39;s some random weekend.</title>
    <description>This is a collection of some random thoughts, #TILs, and some tips for myself.
</description>
    <link>http://seimith.github.io/</link>
    <atom:link href="http://seimith.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 20 Feb 2019 15:17:43 -0800</pubDate>
    <lastBuildDate>Wed, 20 Feb 2019 15:17:43 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Deploying a Static Website to AWS</title>
        <description>&lt;p&gt;1 - You need to have an AWS s3 Account&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You will need you `Access key ID` &amp;amp; `Secret access key`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2 - Install the &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS CLI&lt;/code&gt; (https://docs.aws.amazon.com/cli/latest/userguide/cli-install-macos.html)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 1. Download the AWS CLI Bundled Installer.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;s2&quot;&gt;&quot;https://s3.amazonaws.com/aws-cli/awscli-bundle.zip&quot;&lt;/span&gt; -o &lt;span class=&quot;s2&quot;&gt;&quot;awscli-bundle.zip&quot;&lt;/span&gt;

// 2. Unzip the package.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;unzip awscli-bundle.zip

// 3. Run the install executable
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3 - Configure you AWS Credentials&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;aws configure

// AWS Access Key ID: &lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;YOUR-KEY-ID&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;
// AWS Secret Access Key: &lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;YOUR-SECRET-KEY&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;
// Default region name &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;us-west-1]: us-west-1
// Default output format &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;dist/]: dist/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;4 - Configure your package.json to make things easier&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;ember build&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;aws&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;aws s3 sync dist/ s3://[your-bucket]/&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;deploy&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;npm run build &amp;amp;&amp;amp; npm run aws&quot;&lt;/span&gt; &amp;lt;---- &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;You want to make sure you build because this will update your dist/ folder and get pushed into your AWS bucket&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Also, &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; means that &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;npm run aws&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; will run AFTER &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;npm run build&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; completes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;5 - Deploy&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm run deploy

// &lt;span class=&quot;s1&quot;&gt;&#39;npm run deploy&#39;&lt;/span&gt; will &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ember build&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; and update the &lt;span class=&quot;s1&quot;&gt;&#39;dist/&#39;&lt;/span&gt; folder.
// After the &lt;span class=&quot;s1&quot;&gt;&#39;dist/&#39;&lt;/span&gt; has been updated, the contents will publish to &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;s3://[your-bucket]]/&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 20 Feb 2019 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/deploying/static/aws/2019/02/20/Deploying-a-Static-Website-to-AWS.html</link>
        <guid isPermaLink="true">http://seimith.github.io/deploying/static/aws/2019/02/20/Deploying-a-Static-Website-to-AWS.html</guid>
        
        
        <category>deploying</category>
        
        <category>static</category>
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>My Go-To Media Queries</title>
        <description>&lt;p&gt;When I’m making a website from scratch I always end up scratching my head on what breakpoints to use for the media queries. There’s just a TON to use.&lt;/p&gt;

&lt;p&gt;These are my ULTRA SIMPLE go-to media query breakpoints. It’s super simple because there are only two sizes to think about!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Small shit vs large shit.&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// This is for views at 850px or less, which is basically when you split your 13&quot;
// browser in half (vertically).

@media (max-width : 850px) {
  ...
}

// This is the counterpart to the previous media query. Anything larger will use
// styles specified in here.

@media (min-width : 850px) {
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 18 Feb 2019 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/css/scss/media-queries/breakpoints/2019/02/18/media-queries.html</link>
        <guid isPermaLink="true">http://seimith.github.io/css/scss/media-queries/breakpoints/2019/02/18/media-queries.html</guid>
        
        
        <category>css</category>
        
        <category>scss</category>
        
        <category>media-queries</category>
        
        <category>breakpoints</category>
        
      </item>
    
      <item>
        <title>(Swift) Creating a Custom Delegate</title>
        <description>&lt;p&gt;Exposing a function from &lt;strong&gt;UIViewController A&lt;/strong&gt; to a &lt;strong&gt;CUSTOM UIVIEW&lt;/strong&gt; such that you can call it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CUSTOM UIVIEW&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
import DesignSystem

protocol CustomViewDelegate: class {
    // make this class protocol so you can create `weak` reference
    func triggerSegueToGallery()
}

class AttachmentBar: UIView {
     weak var delegate: CustomViewDelegate?   // make this `weak` to avoid strong reference cycle b/w view controller and its views
     func triggerSegueToGallery() {
        delegate?.triggerSegueToGallery()
    }

     func someOtherFunc () {
       item.addTarget(self, action: #selector(triggerSegueToGallery), for: .touchUpInside)
     }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;UIViewController A&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit
import DesignSystem

class PublisherViewController: UIViewController, CustomViewDelegate {
    func triggerSegueToGallery() {
        self.performSegue(withIdentifier: &quot;arbitraryIDForCollectionView&quot;, sender: self)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 06 Feb 2019 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/uiview/uiviewcontroller/mobile/2019/02/06/Swift-Creating-a-Custom-Delegate.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uiview/uiviewcontroller/mobile/2019/02/06/Swift-Creating-a-Custom-Delegate.html</guid>
        
        
        <category>swift</category>
        
        <category>uiview</category>
        
        <category>UIViewController</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>(SCSS) Get-Map</title>
        <description>&lt;p&gt;Creating variables, or tokens, is pretty handy when you want to tidy up your styles. You can create what I call a grouped variable.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$my-cool-variable: (
  light: #FFFFFF,
  medium: #CCCCCC,
  heavy: #000000,
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can then use the variable like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a {
  color: map-get($my-cool-variable, medium);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 04 Feb 2019 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/scss/get-map/variables/2019/02/04/SCSS-Get-Map.html</link>
        <guid isPermaLink="true">http://seimith.github.io/scss/get-map/variables/2019/02/04/SCSS-Get-Map.html</guid>
        
        
        <category>scss</category>
        
        <category>get-map</category>
        
        <category>variables</category>
        
      </item>
    
      <item>
        <title>(SCSS) Nesting with at-root</title>
        <description>&lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;@at-root&lt;/code&gt; to extend your styles.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;amp;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_bar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_baz&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stuff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_primary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;amp;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;&amp;amp;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;ss&quot;&gt;color: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 29 Jan 2019 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/scss/at-root/2019/01/29/SCSS-Nesting-with-at-root.html</link>
        <guid isPermaLink="true">http://seimith.github.io/scss/at-root/2019/01/29/SCSS-Nesting-with-at-root.html</guid>
        
        
        <category>scss</category>
        
        <category>at-root</category>
        
      </item>
    
      <item>
        <title>Check for color with Regex</title>
        <description>&lt;p&gt;Hey, are you in need of checking if a string is &lt;code class=&quot;highlighter-rouge&quot;&gt;hex, rgb, rgba, hsl, and hsla&lt;/code&gt;? Look no further.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(^[a-zA-Z]+$)|(#(?:[0-9a-f]{2}){2,4}|#[0-9a-f]{3}|(?:rgba?|hsla?)\((?:\d+%?(?:deg|rad|grad|turn)?(?:,|\s)+){2,3}[\s\/]*[\d\.]+%?\))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/(
      #(?:[0-9a-f]{2}){2,4}               Match #ARGB, #RRGGBB, or #AARRGGBB
   |                                   or
      #[0-9a-f]{3}                        Match #RGB
   |                                   or
      (^[a-zA-Z]+$)                       Match any string (red, green, blue)
   |                                   or
      (?:rgba?|hsla?)                     Match hsl, rgb, hsla, or rgba
      \(                                  Match (
         (
            ?:\d+%?(?:deg|rad|grad|turn)?    Match 0, 0%, 00%, 0deg, 0rad, etc.
            (?:,|\s)+                        Match a comma and/or space to separate them
         ){2,3}                           Repeat 2 or 3 times
         [\s\/]*[\d\.]+%?                 Match the last value, period and slash allowed
      \)                                  Match )
)/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://regexr.com/3omin&quot;&gt;Regexr Example&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 28 Apr 2018 03:33:33 -0700</pubDate>
        <link>http://seimith.github.io/regex/colors/hex/rgb/rgba/hsl/hsla/snippet/2018/04/28/Check-for-color-with-Regex.html</link>
        <guid isPermaLink="true">http://seimith.github.io/regex/colors/hex/rgb/rgba/hsl/hsla/snippet/2018/04/28/Check-for-color-with-Regex.html</guid>
        
        
        <category>regex</category>
        
        <category>colors</category>
        
        <category>hex</category>
        
        <category>rgb</category>
        
        <category>rgba</category>
        
        <category>hsl</category>
        
        <category>hsla</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>Remove Mirage Logs</title>
        <description>&lt;p&gt;These past couple of days I’ve been using Mirage, and the console will output a bunch of messages by default. To turn them off, use the following in your &lt;code class=&quot;highlighter-rouge&quot;&gt;config.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;this.logging = false;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 03 Mar 2018 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/ember/mirage/snippet/console/logs/2018/03/03/Remove-Mirage-Logs.html</link>
        <guid isPermaLink="true">http://seimith.github.io/ember/mirage/snippet/console/logs/2018/03/03/Remove-Mirage-Logs.html</guid>
        
        
        <category>ember</category>
        
        <category>mirage</category>
        
        <category>snippet</category>
        
        <category>console</category>
        
        <category>logs</category>
        
      </item>
    
      <item>
        <title>Command to Compress and Password Protect</title>
        <description>&lt;p&gt;Lately I’ve been needing to send some folks password protected zip files. Below is a short and basic snippet that you can use to run in your terminal.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;zip -er newFOLDER oldFolder
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once your run the above snippet, enter a password.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oldFolder&lt;/code&gt; is the folder with your contents&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;newFOLDER&lt;/code&gt; is the name of the outputed &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; file of this command&lt;/p&gt;

&lt;p&gt;The output  will be &lt;code class=&quot;highlighter-rouge&quot;&gt;newFOLDER.zip&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/terminal/command/snippet/zip/2018/02/24/Command-to-Compress-and-Password-Protect.html</link>
        <guid isPermaLink="true">http://seimith.github.io/terminal/command/snippet/zip/2018/02/24/Command-to-Compress-and-Password-Protect.html</guid>
        
        
        <category>terminal</category>
        
        <category>command</category>
        
        <category>snippet</category>
        
        <category>zip</category>
        
      </item>
    
      <item>
        <title>Transform camelCase a Camel Case with Regex</title>
        <description>&lt;p&gt;I’m quite terrible at regex, but lately I figured that I actually really need to learn it.&lt;/p&gt;

&lt;p&gt;Below is a snippet for transforming “camelCase” strings into “Camel Case” strings.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var camelCaseWord = &quot;camelCaseWord&quot;;
camelCaseWord.replace(/([A-Z])/g, &#39; $1&#39;).replace(/^[a-z]/g, function(firstLetter) {
  return firstLetter.toUpperCase()
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 15 Jan 2018 07:23:33 -0800</pubDate>
        <link>http://seimith.github.io/snippet/regex/camelcase/javascript/2018/01/15/Transform-camelCase-a-Camel-Case-with-Regex.html</link>
        <guid isPermaLink="true">http://seimith.github.io/snippet/regex/camelcase/javascript/2018/01/15/Transform-camelCase-a-Camel-Case-with-Regex.html</guid>
        
        
        <category>snippet</category>
        
        <category>regex</category>
        
        <category>camelCase</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Align Divs on a Line</title>
        <description>&lt;p&gt;A few days ago I had to make a few &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt; of varying height. Unfortunately, they were looking a little wonky because they weren’t aligning. I made them &lt;code class=&quot;highlighter-rouge&quot;&gt;display: inline-block&lt;/code&gt;, but what’s going on?&lt;/p&gt;

&lt;p&gt;Making my &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt; display as inline-block was to make my &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt; appear on the same line. However, it was not enough to make them straight.&lt;/p&gt;

&lt;p&gt;TLDR; I had to align my divs, and below are two ways to do so!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: inline-block;
vertical-align: middle;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;display: inline-block;
white-space: nowrap;
overflow-x: auto;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 13 Jan 2018 18:10:33 -0800</pubDate>
        <link>http://seimith.github.io/html/css/divs/snippet/styles/2018/01/13/Align-Divs-on-a-Line.html</link>
        <guid isPermaLink="true">http://seimith.github.io/html/css/divs/snippet/styles/2018/01/13/Align-Divs-on-a-Line.html</guid>
        
        
        <category>html</category>
        
        <category>css</category>
        
        <category>divs</category>
        
        <category>snippet</category>
        
        <category>styles</category>
        
      </item>
    
  </channel>
</rss>
