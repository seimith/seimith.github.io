<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kaixo, i&#39;m smith.</title>
    <description>This is a collection of some random thoughts, #TILs, and some tips for myself.
</description>
    <link>http://seimith.github.io/</link>
    <atom:link href="http://seimith.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 13 Jan 2017 20:40:46 -0800</pubDate>
    <lastBuildDate>Fri, 13 Jan 2017 20:40:46 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>3D Printing</title>
        <description>&lt;p&gt;I recently began fiddling around with 3D printing. In hind site, I should’ve started about a year ago because I had access to a 3D printer. Unfortunately, life happened and I never got around to it. Until now. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/13Large.gif&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 3D printing machines that I have access to are the &lt;code class=&quot;highlighter-rouge&quot;&gt;FormLabs Form 1+&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tinkerine DittoPro&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FormLabs Form 1+&lt;/code&gt; machine requires a UV curing resin. This means that there is a detachable well that holds the liquid (this can potentially lead to hot mess if you’re not careful enough). Also, the fumes are moderately strong so there is a protective case around the machine.&lt;/p&gt;

&lt;p&gt;The actual printing takes place upside down. This sounds cool, however, this can also lead to some potential problems if you want to print out a heavier object. What happens during this process is that the resin cures via UV lasers as the base of the printing platform and the solids adhere to an arm that slowly moves up. So as the arm moves up, the item that’s printing gets suspended in the air.&lt;/p&gt;

&lt;p&gt;When you’ve completed your printing, you have to physically remove the base of the arm and then pry off your item. At this point, your item might still be malleable and it’ll definitely be goopy from residual resin. This process is definitely not dry. After you pry it off, which can be rather difficult, you’ll need to let it sit in a 91% alcohol bath for a few more minutes (some more fumes).&lt;/p&gt;

&lt;p&gt;I don’t have any videos or images of it because it was messy for me, but you can definitely Google it. The printing is pretty slow because of the curing that occurs inside of the resin tank.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Tinkerine DittoPro&lt;/code&gt;, on the other hand, requires a malleable filament (imagine something like a glue gun). You feed the filament, or “ink”, into the machine and the “ink” gets extruded out and guided into the shape of your item via some special arm at the top of the machine.&lt;/p&gt;

&lt;p&gt;I personally found the Tinkerine DittoPro to be very intuitive to use because there were no extra steps to it. All I had to do was load my &lt;code class=&quot;highlighter-rouge&quot;&gt;.g&lt;/code&gt; file via an SD card and print.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to 3D Print on FormLab 1+ or Tinkerine DittoPro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create vector (ex Sketch)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/1.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Save vector as an .esp file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/2.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 3: Open 3D software (ex Rhino 5) and import your .esp file&lt;/p&gt;

&lt;p&gt;Step 4: Convert your imported vector into a layer and then extrude, bool diff, and/or union&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/3.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/4.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/6.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/7.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/8.gif&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Select your object and export as .stl&lt;/p&gt;

&lt;p&gt;Step 6: Import your .stl file in 3D printing program (ex Tinkerine DittoPro or FormLabs PreForm)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/10.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/11.png&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 7: Either print via the FormLabs Form 1+ (connect with usb) or save your project as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.g&lt;/code&gt; file and put it on an SD card that can be plugged into the Tinkerine DittoPro&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/13Large.gif&quot; alt=&quot;End result of 3D print&quot; title=&quot;End result of 3D print&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/3d/printing/formlabs/formlabs%20form%201+/tinkerine/dittopro/2017/01/13/3D-Printing.html</link>
        <guid isPermaLink="true">http://seimith.github.io/3d/printing/formlabs/formlabs%20form%201+/tinkerine/dittopro/2017/01/13/3D-Printing.html</guid>
        
        
        <category>3D</category>
        
        <category>printing</category>
        
        <category>FormLabs</category>
        
        <category>FormLabs Form 1+</category>
        
        <category>Tinkerine</category>
        
        <category>DittoPro</category>
        
      </item>
    
      <item>
        <title>(Swift) Keyboard Visibility</title>
        <description>&lt;p&gt;This post is about doing things when your keyboard is visible or not. You might want to have some animation when your keyboard comes into view, or you might want an alert to pop up. Whatever it may be, here’s a snippet for that.&lt;/p&gt;

&lt;p&gt;In the example below, I just have a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextView&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; set up so that you can see the keyboard appear and disappear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-07-assets/keyboardLarge.gif&quot; alt=&quot;Keyboard toggling&quot; title=&quot;Keyboard toggling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Set up the UITextView&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myCoolTextArea = UITextView()
myCoolTextArea.backgroundColor = UIColor.gray
myCoolTextArea.frame = CGRect(x: 0, y: 20, width: self.view.frame.width, height: 300)
myCoolTextArea.text = &quot;This is a textarea! :)&quot;
self.view.addSubview(myCoolTextArea)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Set up a UIButton to dismiss your keyboard&lt;/strong&gt;
In this step I &lt;code class=&quot;highlighter-rouge&quot;&gt;add a target&lt;/code&gt; to a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;dismissMyKeyboard&lt;/code&gt; to hide my keyboard.&lt;/p&gt;

&lt;p&gt;Check out my previous post on how to add a target &lt;a href=&quot;http://seimith.github.io/swift/addtarget/click%20handle/snippet/2016/12/26/Swift-Add-Target-for-Click-Handle.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myButtonToDismissKeyboard = UIButton()
myButtonToDismissKeyboard.backgroundColor = UIColor.gray
myButtonToDismissKeyboard.frame = CGRect(x: 0, y: 350, width: self.view.frame.width, height: 30)
myButtonToDismissKeyboard.setTitle(&quot;Dimiss Button&quot;, for: .normal)
myButtonToDismissKeyboard.addTarget(self, action: #selector(dismissMyKeyboard), for: .touchUpInside)
self.view.addSubview(myButtonToDismissKeyboard)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;**Step 3: Fuctions **&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func keyboardWillAppear (_ notification: NSNotification) {
    print(&quot;=== keyboardWillAppear&quot;)
}

func keyboardWillDisappear (_ notification: NSNotification) {
    print(&quot;=== keyboardWillDisappear&quot;)
}

func dismissMyKeyboard () {
    self.view.endEditing(true)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Add Observers&lt;/strong&gt;
This is similar to adding targets. In order for my functions &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; to be observed and then get called, I need to add the following to my &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NotificationCenter.default.addObserver(self, selector:#selector(keyboardWillAppear), name: NSNotification.Name.UIKeyboardWillShow, object: nil)

NotificationCenter.default.addObserver(self, selector:#selector(keyboardWillDisappear), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftKeyboardVisibility&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 07 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/keyboard/snippet/2017/01/07/Swift-Keyboard-Visibility.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/keyboard/snippet/2017/01/07/Swift-Keyboard-Visibility.html</guid>
        
        
        <category>swift</category>
        
        <category>keyboard</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Troubleshooting Lost Simulators</title>
        <description>&lt;p&gt;Have you ever ran into the issue of all of your simulators disappearing?&lt;/p&gt;

&lt;p&gt;I have. My buddy created a new project and when I cloned her repo, all of my simulators cleared out!&lt;/p&gt;

&lt;p&gt;Turned out that I needed to change my &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS Deployment Target&lt;/code&gt;. My buddy was running her project on &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS10.1&lt;/code&gt; and I had not updated and was still on 10.0.&lt;/p&gt;

&lt;p&gt;Once I changed my target and performed a good clean, all my simulators returned!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-06-assets/img1.png&quot; alt=&quot;alt text&quot; title=&quot;iOS Deployment Target&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-06-assets/img2.png&quot; alt=&quot;alt text&quot; title=&quot;List of targets!&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/troubleshoot/2017/01/06/Swift-Troubleshooting-Lost-Simulators.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/troubleshoot/2017/01/06/Swift-Troubleshooting-Lost-Simulators.html</guid>
        
        
        <category>swift</category>
        
        <category>troubleshoot</category>
        
      </item>
    
      <item>
        <title>(Swift) Add Target for Click Handle</title>
        <description>&lt;p&gt;This entry will show how you’d add a click handler to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;. It’s very easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-12-24-assets/SwiftAddTargetMedium.gif&quot; alt=&quot;alt text&quot; title=&quot;Clicking on a UIButton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing you want to do it make a button.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myCoolButton = UIButton()
myCoolButton.setTitle(&quot;Hey Click Me if You Dare&quot;, for: .normal)
myCoolButton.frame = CGRect(x: 100, y: 100, width: 200, height: 100)
myCoolButton.backgroundColor = UIColor.orange
self.view.addSubview(myCoolButton)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this scenario, I’m just slapping it in my &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; function. You can also see that I’ve set the title and set it for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.normal&lt;/code&gt; state. Then, I specified the frame’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;. And finally, I added the button to the &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;subView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After this, add the target.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myCoolButton.addTarget(self, action: #selector(self.handleOnClickOfMyCoolButton), for: .touchUpInside)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; is the method that you want to get called, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIControlEvent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Somewhere in your file, add the function &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnClickOfMyCoolButton&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func handleOnClickOfMyCoolButton () {
	print(&quot;Hey, I was clicked!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftAddTarget&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/addtarget/click%20handle/snippet/2016/12/26/Swift-Add-Target-for-Click-Handle.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/addtarget/click%20handle/snippet/2016/12/26/Swift-Add-Target-for-Click-Handle.html</guid>
        
        
        <category>swift</category>
        
        <category>addTarget</category>
        
        <category>click handle</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) zIndex zPosition</title>
        <description>&lt;p&gt;I’m a web person, and I almost always think web first.&lt;/p&gt;

&lt;p&gt;With CSS there’s a property called &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt; and it’s responsible for positioning elements on the &lt;code class=&quot;highlighter-rouge&quot;&gt;z plane&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In iOS, there’s an analogous property on the layer of elements that you can augment called, &lt;code class=&quot;highlighter-rouge&quot;&gt;zPostion&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yourThingHere.layer.zPosition = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/zposition/snippet/2016/12/23/Swift-zIndex-zPosition.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/zposition/snippet/2016/12/23/Swift-zIndex-zPosition.html</guid>
        
        
        <category>swift</category>
        
        <category>zPosition</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Make UILabel Conform to Length of Text</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-12-23-assets/img2.png&quot; alt=&quot;alt text&quot; title=&quot;Simulator of UILabel conforming to width of text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a snippet of how you can make your UILabel conform to the width of your text.&lt;/p&gt;

&lt;p&gt;You want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;.sizeToFit()&lt;/code&gt; on your UILabel, otherwise you’d have to hardcode  your label’s width in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {
	override func viewDidLoad() {
		super.viewDidLoad()

		let myCoolUILabel = UILabel()
		myCoolUILabel.text = &quot;My Cool Label&quot;
		myCoolUILabel.backgroundColor = UIColor.orange
 		myCoolUILabel.frame = CGRect(x: 100, y: 100, width: 30, height: 30)
		myCoolUILabel.sizeToFit()
		self.view.addSubview(myCoolUILabel)
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So, no more of this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-12-23-assets/img1.png&quot; alt=&quot;alt text&quot; title=&quot;Simulator of UILabel not conforming to width of text&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/uilabel/snippet/2016/12/13/Swift-Make-UILabel-conform-to-length-of-text.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uilabel/snippet/2016/12/13/Swift-Make-UILabel-conform-to-length-of-text.html</guid>
        
        
        <category>swift</category>
        
        <category>uilabel</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Custom Segue</title>
        <description>&lt;p&gt;This tutorial will demonstrate how to add a custom segue to your Swift app.&lt;/p&gt;

&lt;p&gt;There are a few generic segues that are available to use in Xcode, however, you might be in a situation where you need specific transitions that might be better suited for gestures.&lt;/p&gt;

&lt;p&gt;In this case, the animation in play will be a sliding one (great for swiping).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/CustomSegue.gif&quot; alt=&quot;alt text&quot; title=&quot;Custom segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create swift project&lt;/strong&gt;
Create a “Single View Application” project. If you don’t want extra folders in your project for testing, make sure you uncheck the items for tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/1.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a single page application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/2.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a single page application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Create your segue&lt;/strong&gt;
I made a bit of a mistake here in naming my class with lowercase, “firstCustomSegue”. However, this example works just find.&lt;/p&gt;

&lt;p&gt;Make sure to select &lt;code class=&quot;highlighter-rouge&quot;&gt;UIStoryboardSegue&lt;/code&gt; as the subclass and Swift as the language.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/3.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a new file for your segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/4.png&quot; alt=&quot;alt text&quot; title=&quot;Naming your segue file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following is the code + comments for the custom segue explaining each section.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class firstCustomSegue: UIStoryboardSegue {
    override func perform() {
        // Declare the INITAL view and the DESTINATION view
        // This will break and be nil if you don&#39;t have a second view controller for your DESTINATION view
        let initalView = self.source.view as UIView!
        let destinationView = self.destination.view as UIView!

        // Specify the screen HEIGHT and WIDTH
        let screenHeight = UIScreen.main.bounds.size.height
        let screenWidth = UIScreen.main.bounds.size.width

        // Specify the INITIAL PLACEMENT of the DESTINATION view
        initalView?.frame = CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight)
        destinationView?.frame = CGRect(x: screenWidth, y: 0, width: screenWidth, height: screenHeight)

        // Access the app&#39;s key window and add the DESTINATION view ABOVE the INITAL view
        let appWindow = UIApplication.shared.keyWindow
        appWindow?.insertSubview(destinationView!, aboveSubview: initalView!)

        // Animate the segue&#39;s transition
        UIView.animate(withDuration: 0.4, animations: {
            // Left/Right
            initalView?.frame = (initalView?.frame.offsetBy(dx: -screenWidth, dy: 0))!
            destinationView?.frame = (destinationView?.frame.offsetBy(dx: -screenWidth, dy: 0))!
        }) { (Bool) in
            self.source.present(self.destination, animated: false, completion: nil)
        }
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Step 3: Create a second view controller&lt;/strong&gt;
When you initially create your Swift app, you get a boilerplate set of files. One of them is the &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController.swift&lt;/code&gt;. We’re going to use this view controller, but in addition to this view controller we need to create another view controller for another view that we also need to make. &lt;code class=&quot;highlighter-rouge&quot;&gt;:-} in next step&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case, the new view controller that I’ve created here is called &lt;code class=&quot;highlighter-rouge&quot;&gt;SecondViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure to update the subclass to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You don’t need to add anything in the second view controller.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/5.png&quot; alt=&quot;alt text&quot; title=&quot;Creating a new view controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Add a second UIView controller to the storyboard&lt;/strong&gt;
Now that I’ve created a second view controller I need to add a new view controller.&lt;/p&gt;

&lt;p&gt;This can be done via the &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt; and by searching for &lt;code class=&quot;highlighter-rouge&quot;&gt;View Controller&lt;/code&gt; and dragging it onto the board.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/6.png&quot; alt=&quot;alt text&quot; title=&quot;Adding a second UIView controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you do that you need to reassign the view controller “controlling” that new view.&lt;/p&gt;

&lt;p&gt;Make sure you update the class to the &lt;code class=&quot;highlighter-rouge&quot;&gt;SecondViewController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/13.png&quot; alt=&quot;alt text&quot; title=&quot;Reassigning the controller for the new UIView controller&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Differentiating the scenes, adding a button and its constraints&lt;/strong&gt;
Here, I’ve added different background colors to my views so I can visually differentiate the two scenes that I want to segue between.&lt;/p&gt;

&lt;p&gt;I’ve also added a button such that I can use it to trigger my custom segue. You can totally add gesture recognizers here, but that’s for another time. &lt;code class=&quot;highlighter-rouge&quot;&gt;:)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In terms of constraints, I’ve added a total of 4 constraints to my button:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Height&lt;/li&gt;
  &lt;li&gt;Width&lt;/li&gt;
  &lt;li&gt;Horizontally in Container&lt;/li&gt;
  &lt;li&gt;Vertically in Container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/7.png&quot; alt=&quot;alt text&quot; title=&quot;Adding constraints: height, width&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/8.png&quot; alt=&quot;alt text&quot; title=&quot;Adding constraints: horizontal, vertical&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Setting the custom segue&lt;/strong&gt;
This is where you finally add the segue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/9.png&quot; alt=&quot;alt text&quot; title=&quot;Setting the custom segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On a Mac, &lt;code class=&quot;highlighter-rouge&quot;&gt;control + click + drag&lt;/code&gt;, from the button to the second view controller and you will get &lt;code class=&quot;highlighter-rouge&quot;&gt;Action Segue&lt;/code&gt; selections.&lt;/p&gt;

&lt;p&gt;Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom&lt;/code&gt;. (Although I see my custom segue class name in the list, &lt;code class=&quot;highlighter-rouge&quot;&gt;first custom&lt;/code&gt;, selecting this has not worked for me.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/11.png&quot; alt=&quot;alt text&quot; title=&quot;Selecting your custom segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, click on the segue representation on the storyboard (the thing with the bracket icon connecting the two view controllers) and remember to update the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Identifier&lt;/li&gt;
  &lt;li&gt;Class&lt;/li&gt;
  &lt;li&gt;Kind (should already be &lt;code class=&quot;highlighter-rouge&quot;&gt;Custom&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-11-05-assets/12.png&quot; alt=&quot;alt text&quot; title=&quot;Updating segue&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that should be it. When you load your simulator you should be able to segue by “sliding” between two scenes!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftCustomSegues&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 05 Nov 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/segue/transitions/animation/2016/11/05/Swift-Custom-Segue.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/segue/transitions/animation/2016/11/05/Swift-Custom-Segue.html</guid>
        
        
        <category>swift</category>
        
        <category>segue</category>
        
        <category>transitions</category>
        
        <category>animation</category>
        
      </item>
    
      <item>
        <title>(Swift) UIImage to Base64</title>
        <description>&lt;p&gt;I recently had a project where I needed to convert my image to base64. With JavaScript it’s relatively easy and since I was new to Swift I had no idea how to do this.&lt;/p&gt;

&lt;p&gt;Below, I obtain my image as a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIImage&lt;/code&gt;, then convert it into NSData, and then into base64.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let image = ...UIImage(CGImage: cgImageRef!, scale: 1.0, orientation: UIImageOrientation.Right)...
 
// Turn UIImage into Base64
let imageNSData = UIImageJPEGRepresentation(image, 0.05)
let base64String = imageNSData!.base64EncodedStringWithOptions(.Encoding64CharacterLineLength)

print(&quot;Base64?&quot;, base64String)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can use &lt;a href=&quot;http://codebeautify.org/base64-to-image-converter&quot;&gt;http://codebeautify.org/base64-to-image-converter&lt;/a&gt; to test the base64 image.&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Oct 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/snippet/2016/10/30/Swift-UIImage-to-Base64.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/snippet/2016/10/30/Swift-UIImage-to-Base64.html</guid>
        
        
        <category>swift</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>Unable to run gem install XYZ on OS X El Capitan</title>
        <description>&lt;p&gt;If you’ve upgraded your computer to El Capitan and you’re getting errors while trying to install some gems, this is due to  El Capitan’s introduction of SIP (System Integrity Protection).&lt;/p&gt;

&lt;p&gt;Read more about SIP here: &lt;a href=&quot;https://support.apple.com/en-us/HT204899&quot;&gt;https://support.apple.com/en-us/HT204899&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The other day I was trying to run &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; and got a permissions error. Not cool.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler

Fetching: bundler-1.13.6.gem (100%)
ERROR:  While executing gem ... (Gem::FilePermissionError)
You don&#39;t have write permissions for the /usr/bin directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Try installing to your directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem install bundler -n /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sat, 29 Oct 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/gem/el%20capitan/install/troubleshoot/2016/10/29/Unable-to-on-OS-X-El-Capitan.html</link>
        <guid isPermaLink="true">http://seimith.github.io/gem/el%20capitan/install/troubleshoot/2016/10/29/Unable-to-on-OS-X-El-Capitan.html</guid>
        
        
        <category>gem</category>
        
        <category>el capitan</category>
        
        <category>install</category>
        
        <category>troubleshoot</category>
        
      </item>
    
      <item>
        <title>(Swift) Sliding UIView</title>
        <description>&lt;p&gt;Today we’re going to make a sliding UIView. Similar to the previous post, this tutorial is also very similar to my prievious post about &lt;a href=&quot;http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html&quot; title=&quot;Post on rotating UIViews&quot;&gt;rotating UIViews&lt;/a&gt;, but this is how to do a sliding animation. You might need this type of animation for opening a menu or showing an alert.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-10-01-assets/slidingUIViewSm.gif&quot; alt=&quot;alt text&quot; title=&quot;Sliding UIViews&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 2.2&lt;/li&gt;
  &lt;li&gt;Xcode Version 7.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1 to 4: Create swift project, set up your storyboard, add constraints, and connect your outlets&lt;/strong&gt;
The steps to set up this project this is pretty much the same as the &lt;a href=&quot;http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/08/28/Swift-Rotating-UIView.html&quot; title=&quot;Post on rotating UIViews&quot;&gt;rotating UIViews&lt;/a&gt; post, so check it out first. After that, you can just augment &lt;strong&gt;Step 5&lt;/strong&gt; to make your UIView slide.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Side Note&lt;/strong&gt;: What’s different from this and the previous tutorials are the constraints that I added to the UIView. However, it doesn’t really matter… :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Add code to slide&lt;/strong&gt;
In this example, we’re adding animation to slide a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; once the app loads. To do that, we’ll create a function, then call that function within the &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; lifecycle function.&lt;/p&gt;

&lt;p&gt;This is the function that contains the animation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func beginAnimation () {
  // 1st transformation
  self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, -100)

  UIView.animateWithDuration(0.4, delay: 0, options: [.CurveEaseInOut], animations: {
      // 2nd transformation
      self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 50)
      }, completion: { completion in
          UIView.animateWithDuration(0.2, delay: 0.0, options: [.CurveEaseInOut], animations: {
              // 3rd transformation
              self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 0)
          }, completion: nil)
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this example, I’ve got 3 transformations because the animation that I’m going for is a slide+little bump+short slide to position.&lt;/p&gt;

&lt;p&gt;The first transformation is the starting position, and here, I’ve got it set above the visible viewport at &lt;code class=&quot;highlighter-rouge&quot;&gt;-100&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, -100)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second transformation brings the UIView into the view, and with the “.CurveEaseInOut” option will give this a snappiness at &lt;code class=&quot;highlighter-rouge&quot;&gt;50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 50)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally, the third transformation, I have it in the completion block, and this will bring the UIView up and make it look like it “bumps” into it’s final position at &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 0)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add the code in your &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; to start the pulse&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;self.beginAnimation()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Your file should look similar to this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {
  @IBOutlet weak var uiViewToSlide: UIView!

  override func viewDidLoad() {
    super.viewDidLoad()
    // Do any additional setup after loading the view, typically from a nib.
    self.beginAnimation()
  }

  override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
  }

  func beginAnimation() {
    self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, -100)

    UIView.animateWithDuration(0.4, delay: 0, options: [.CurveEaseInOut], animations: {
      self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 50)
      }, completion: { completion in
        UIView.animateWithDuration(0.2, delay: 0.0, options: [.CurveEaseInOut], animations: {
          self.uiViewToSlide.transform = CGAffineTransformMakeTranslation(0, 0)
        }, completion: nil)
    })

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that should be it. When you reload your simulator you should see a pulsating pink square!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftSlidingUIView&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 08:22:15 -0700</pubDate>
        <link>http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/10/01/Swift-Sliding-UIView.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uiview/views/tutorial/animation/2016/10/01/Swift-Sliding-UIView.html</guid>
        
        
        <category>swift</category>
        
        <category>uiview</category>
        
        <category>views</category>
        
        <category>tutorial</category>
        
        <category>animation</category>
        
      </item>
    
  </channel>
</rss>
