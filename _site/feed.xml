<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kaixo, i&#39;m smith.</title>
    <description>This is a collection of some random thoughts, #TILs, and some tips for myself.
</description>
    <link>http://seimith.github.io/</link>
    <atom:link href="http://seimith.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 28 Jan 2017 12:03:09 -0800</pubDate>
    <lastBuildDate>Sat, 28 Jan 2017 12:03:09 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>(Swift) Detect Typing</title>
        <description>&lt;p&gt;Here’s a snippet on how to detect typing on your &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt; app. It’s pretty simple because we’re utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextViewDelegate&lt;/code&gt; delegate. Aka, built in success - thank you &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This snippet is pretty short. See below for some code that will print out text when you type.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController, UITextViewDelegate {

  // 1. Creating a UITextView
  let myTextArea = UITextView(frame: CGRect(x: 30, y: 30, width: 200, height: 200))

  override func viewDidLoad() {
    super.viewDidLoad()

    // 2. You need this; setting delegate to self
    myTextArea.delegate = self

    // 3. Adding color and adding my UITextView to my controller&#39;s view
    myTextArea.backgroundColor = UIColor.gray
    self.view.addSubview(myTextArea)
  }

  override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
  }

  // 4. Detection; printing out the text typed
  func textViewDidChange (_ textView: UITextView) {
    // Your code here.
    print(&quot;===== Text:&quot;, textView.text)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/keyboard/handler/snippet/2017/01/28/Swift-Detect-Keyboard-Typing.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/keyboard/handler/snippet/2017/01/28/Swift-Detect-Keyboard-Typing.html</guid>
        
        
        <category>swift</category>
        
        <category>keyboard</category>
        
        <category>handler</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Creating a UITableView</title>
        <description>&lt;p&gt;Here’s a snippet on how to make a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;. Check out the code below!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var myCoolTableView = UITableView()
    var myCoolIdentifier = &quot;myCoolCell&quot;
    let items : [String] = [
        &quot;Item Uno&quot;,
        &quot;Item Deux&quot;,
        &quot;Item Three&quot;,
        &quot;Item Four&quot;,
        &quot;Item Cinco&quot;
    ]

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        // Get main screen bounds
        let screenSize: CGRect = UIScreen.main.bounds
        let screenWidth = screenSize.width
        let screenHeight = screenSize.height

        myCoolTableView.dataSource = self
        myCoolTableView.delegate = self
        myCoolTableView.register(UITableViewCell.self, forCellReuseIdentifier: myCoolIdentifier)

        myCoolTableView.frame = CGRect(x: 0, y: 25, width: screenWidth, height: screenHeight);
        self.view.addSubview(myCoolTableView)
    }


    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
        return items.count
    }

    func tableView(_ cellForRowAttableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
        let cell = myCoolTableView.dequeueReusableCell(withIdentifier: myCoolIdentifier, for: indexPath)
        cell.textLabel?.text = self.items[indexPath.row]
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print(&quot;========== Selected:&quot;, (items[indexPath.row]), &quot;@&quot;, indexPath.row)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/uitableview/snippet/2017/01/28/Swift-Creating-a-UITableView.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uitableview/snippet/2017/01/28/Swift-Creating-a-UITableView.html</guid>
        
        
        <category>swift</category>
        
        <category>UITableView</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Adding Audio</title>
        <description>&lt;p&gt;Utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioToolbox&lt;/code&gt; and make a class, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sound&lt;/code&gt;, to pass in the filename of you audio file and it’s type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import AudioToolbox

class Sound {

    var soundEffect: SystemSoundID = 0
    init (name: String, type: String) {
        let path  = Bundle.main.path(forResource: name, ofType: type)!
        let pathURL = NSURL(fileURLWithPath: path)
        AudioServicesCreateSystemSoundID(pathURL as CFURL, &amp;amp;soundEffect)
    }

    func play() {
        AudioServicesPlaySystemSound(soundEffect)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, call it like so:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
Sound(name: &quot;NameOfMyAudioFile&quot;, type: &quot;wav&quot;).play()
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/audio/snippet/audiotoolbox/2017/01/28/Swift-Adding-Audio.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/audio/snippet/audiotoolbox/2017/01/28/Swift-Adding-Audio.html</guid>
        
        
        <category>swift</category>
        
        <category>audio</category>
        
        <category>snippet</category>
        
        <category>AudioToolbox</category>
        
      </item>
    
      <item>
        <title>(App/Extension) The Great Suspender</title>
        <description>&lt;p&gt;I just started using this Chrome extension. It’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;The Great Suspender&lt;/code&gt; and it timesout, or suspends, idle tabs in your browser to save memory and system resources. This is super great if you’re one of those people who have hundreds of tabs open but never seem to be able to get rid of them after days…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-14-assets/img1.png&quot; alt=&quot;The great suspender screenshot&quot; title=&quot;The great suspender screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg?hl=en&quot;&gt;The Great Suspender&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/app/tabs/chrome/extension/2017/01/14/The-Great-Suspender.html</link>
        <guid isPermaLink="true">http://seimith.github.io/app/tabs/chrome/extension/2017/01/14/The-Great-Suspender.html</guid>
        
        
        <category>app</category>
        
        <category>tabs</category>
        
        <category>chrome</category>
        
        <category>extension</category>
        
      </item>
    
      <item>
        <title>3D Printing</title>
        <description>&lt;p&gt;I recently began fiddling around with 3D printing. In hind site, I should’ve started about a year ago because I had access to a 3D printer. Unfortunately, life happened and I never got around to it. Until now. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/13Large.gif&quot; alt=&quot;Animated image of Tinkerine DittoPro printing&quot; title=&quot;Animated image of Tinkerine DittoPro printing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 3D printing machines that I have access to are the &lt;code class=&quot;highlighter-rouge&quot;&gt;FormLabs Form 1+&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tinkerine DittoPro&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FormLabs Form 1+&lt;/code&gt; machine requires a UV curing resin. This means that there is a detachable well that holds the liquid (this can potentially lead to hot mess if you’re not careful enough). Also, the fumes are moderately strong so there is a protective case around the machine.&lt;/p&gt;

&lt;p&gt;The actual printing takes place upside down. This sounds cool, however, this can also lead to some potential problems if you want to print out a heavier object. What happens during this process is that the resin cures via UV lasers as the base of the printing platform and the solids adhere to an arm that slowly moves up. So as the arm moves up, the item that’s printing gets suspended in the air.&lt;/p&gt;

&lt;p&gt;When you’ve completed your printing, you have to physically remove the base of the arm and then pry off your item. At this point, your item might still be malleable and it’ll definitely be goopy from residual resin. This process is definitely not dry. After you pry it off, which can be rather difficult, you’ll need to let it sit in a 91% alcohol bath for a few more minutes (some more fumes).&lt;/p&gt;

&lt;p&gt;I don’t have any videos or images of it because it was messy for me, but you can definitely Google it. The printing is pretty slow because of the curing that occurs inside of the resin tank.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Tinkerine DittoPro&lt;/code&gt;, on the other hand, requires a malleable filament (imagine something like a glue gun). You feed the filament, or “ink”, into the machine and the “ink” gets extruded out and guided into the shape of your item via some special arm at the top of the machine.&lt;/p&gt;

&lt;p&gt;I personally found the Tinkerine DittoPro to be very intuitive to use because there were no extra steps to it. All I had to do was load my &lt;code class=&quot;highlighter-rouge&quot;&gt;.g&lt;/code&gt; file via an SD card and print.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to 3D Print on FormLab 1+ or Tinkerine DittoPro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create vector (ex Sketch)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/1.png&quot; alt=&quot;Example of Sketch being used for vector drawing&quot; title=&quot;Example of Sketch being used for vector drawing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Save vector as an .esp file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/2.png&quot; alt=&quot;Example of exporting vectors as an .esp file&quot; title=&quot;Example of exporting vectors as an .esp file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 3: Open 3D software (ex Rhino 5) and import your .esp file&lt;/p&gt;

&lt;p&gt;Step 4: Convert your imported vector into a layer and then extrude, bool diff, and/or union&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/3.png&quot; alt=&quot;Example of using Rhino 5 to transform vectors into surfaces&quot; title=&quot;Example of using Rhino 5 to transform vectors into surfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/4.png&quot; alt=&quot;Example of using Rhino 5 to extrude surfaces&quot; title=&quot;Example of using Rhino 5 to extrude surfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/7.png&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/6.png&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/7.png&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/8.gif&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Select your object and export as .stl&lt;/p&gt;

&lt;p&gt;Step 6: Import your .stl file in 3D printing program (ex Tinkerine DittoPro or FormLabs PreForm)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/10.png&quot; alt=&quot;Tinkerine DittoPro printing software&quot; title=&quot;Tinkerine DittoPro printing software&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/11.png&quot; alt=&quot;FormLabs PreForm printing software&quot; title=&quot;FormLabs PreForm printing software&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 7: Either print via the FormLabs Form 1+ (connect with usb) or save your project as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.g&lt;/code&gt; file and put it on an SD card that can be plugged into the Tinkerine DittoPro&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/13Large.gif&quot; alt=&quot;Animated image of Tinkerine DittoPro printing&quot; title=&quot;Animated image of Tinkerine DittoPro printing&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/3d/printing/formlabs/formlabs%20form%201+/tinkerine/dittopro/2017/01/13/3D-Printing.html</link>
        <guid isPermaLink="true">http://seimith.github.io/3d/printing/formlabs/formlabs%20form%201+/tinkerine/dittopro/2017/01/13/3D-Printing.html</guid>
        
        
        <category>3D</category>
        
        <category>printing</category>
        
        <category>FormLabs</category>
        
        <category>FormLabs Form 1+</category>
        
        <category>Tinkerine</category>
        
        <category>DittoPro</category>
        
      </item>
    
      <item>
        <title>(Swift) Keyboard Visibility</title>
        <description>&lt;p&gt;This post is about doing things when your keyboard is visible or not. You might want to have some animation when your keyboard comes into view, or you might want an alert to pop up. Whatever it may be, here’s a snippet for that.&lt;/p&gt;

&lt;p&gt;In the example below, I just have a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextView&lt;/code&gt; and a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt; set up so that you can see the keyboard appear and disappear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-07-assets/keyboardLarge.gif&quot; alt=&quot;Keyboard toggling&quot; title=&quot;Keyboard toggling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Set up the UITextView&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myCoolTextArea = UITextView()
myCoolTextArea.backgroundColor = UIColor.gray
myCoolTextArea.frame = CGRect(x: 0, y: 20, width: self.view.frame.width, height: 300)
myCoolTextArea.text = &quot;This is a textarea! :)&quot;
self.view.addSubview(myCoolTextArea)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Set up a UIButton to dismiss your keyboard&lt;/strong&gt;
In this step I &lt;code class=&quot;highlighter-rouge&quot;&gt;add a target&lt;/code&gt; to a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;dismissMyKeyboard&lt;/code&gt; to hide my keyboard.&lt;/p&gt;

&lt;p&gt;Check out my previous post on how to add a target &lt;a href=&quot;http://seimith.github.io/swift/addtarget/click%20handle/snippet/2016/12/26/Swift-Add-Target-for-Click-Handle.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myButtonToDismissKeyboard = UIButton()
myButtonToDismissKeyboard.backgroundColor = UIColor.gray
myButtonToDismissKeyboard.frame = CGRect(x: 0, y: 350, width: self.view.frame.width, height: 30)
myButtonToDismissKeyboard.setTitle(&quot;Dimiss Button&quot;, for: .normal)
myButtonToDismissKeyboard.addTarget(self, action: #selector(dismissMyKeyboard), for: .touchUpInside)
self.view.addSubview(myButtonToDismissKeyboard)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;**Step 3: Fuctions **&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func keyboardWillAppear (_ notification: NSNotification) {
    print(&quot;=== keyboardWillAppear&quot;)
}

func keyboardWillDisappear (_ notification: NSNotification) {
    print(&quot;=== keyboardWillDisappear&quot;)
}

func dismissMyKeyboard () {
    self.view.endEditing(true)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Add Observers&lt;/strong&gt;
This is similar to adding targets. In order for my functions &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; to be observed and then get called, I need to add the following to my &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; function.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NotificationCenter.default.addObserver(self, selector:#selector(keyboardWillAppear), name: NSNotification.Name.UIKeyboardWillShow, object: nil)

NotificationCenter.default.addObserver(self, selector:#selector(keyboardWillDisappear), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftKeyboardVisibility&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 07 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/keyboard/snippet/2017/01/07/Swift-Keyboard-Visibility.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/keyboard/snippet/2017/01/07/Swift-Keyboard-Visibility.html</guid>
        
        
        <category>swift</category>
        
        <category>keyboard</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Troubleshooting Lost Simulators</title>
        <description>&lt;p&gt;Have you ever ran into the issue of all of your simulators disappearing?&lt;/p&gt;

&lt;p&gt;I have. My buddy created a new project and when I cloned her repo, all of my simulators cleared out!&lt;/p&gt;

&lt;p&gt;Turned out that I needed to change my &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS Deployment Target&lt;/code&gt;. My buddy was running her project on &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS10.1&lt;/code&gt; and I had not updated and was still on 10.0.&lt;/p&gt;

&lt;p&gt;Once I changed my target and performed a good clean, all my simulators returned!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-06-assets/img1.png&quot; alt=&quot;alt text&quot; title=&quot;iOS Deployment Target&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-06-assets/img2.png&quot; alt=&quot;alt text&quot; title=&quot;List of targets!&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/troubleshoot/2017/01/06/Swift-Troubleshooting-Lost-Simulators.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/troubleshoot/2017/01/06/Swift-Troubleshooting-Lost-Simulators.html</guid>
        
        
        <category>swift</category>
        
        <category>troubleshoot</category>
        
      </item>
    
      <item>
        <title>(Swift) Add Target for Click Handle</title>
        <description>&lt;p&gt;This entry will show how you’d add a click handler to a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIButton&lt;/code&gt;. It’s very easy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-12-24-assets/SwiftAddTargetMedium.gif&quot; alt=&quot;alt text&quot; title=&quot;Clicking on a UIButton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing you want to do it make a button.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myCoolButton = UIButton()
myCoolButton.setTitle(&quot;Hey Click Me if You Dare&quot;, for: .normal)
myCoolButton.frame = CGRect(x: 100, y: 100, width: 200, height: 100)
myCoolButton.backgroundColor = UIColor.orange
self.view.addSubview(myCoolButton)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this scenario, I’m just slapping it in my &lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt; function. You can also see that I’ve set the title and set it for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.normal&lt;/code&gt; state. Then, I specified the frame’s &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;backgroundColor&lt;/code&gt;. And finally, I added the button to the &lt;code class=&quot;highlighter-rouge&quot;&gt;self.view&lt;/code&gt; as a &lt;code class=&quot;highlighter-rouge&quot;&gt;subView&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After this, add the target.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myCoolButton.addTarget(self, action: #selector(self.handleOnClickOfMyCoolButton), for: .touchUpInside)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; is the method that you want to get called, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIControlEvent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Somewhere in your file, add the function &lt;code class=&quot;highlighter-rouge&quot;&gt;handleOnClickOfMyCoolButton&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func handleOnClickOfMyCoolButton () {
	print(&quot;Hey, I was clicked!&quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftAddTarget&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/addtarget/click%20handle/snippet/2016/12/26/Swift-Add-Target-for-Click-Handle.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/addtarget/click%20handle/snippet/2016/12/26/Swift-Add-Target-for-Click-Handle.html</guid>
        
        
        <category>swift</category>
        
        <category>addTarget</category>
        
        <category>click handle</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) zIndex zPosition</title>
        <description>&lt;p&gt;I’m a web person, and I almost always think web first.&lt;/p&gt;

&lt;p&gt;With CSS there’s a property called &lt;code class=&quot;highlighter-rouge&quot;&gt;z-index&lt;/code&gt; and it’s responsible for positioning elements on the &lt;code class=&quot;highlighter-rouge&quot;&gt;z plane&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In iOS, there’s an analogous property on the layer of elements that you can augment called, &lt;code class=&quot;highlighter-rouge&quot;&gt;zPostion&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yourThingHere.layer.zPosition = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 23 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/zposition/snippet/2016/12/23/Swift-zIndex-zPosition.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/zposition/snippet/2016/12/23/Swift-zIndex-zPosition.html</guid>
        
        
        <category>swift</category>
        
        <category>zPosition</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Make UILabel Conform to Length of Text</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-12-23-assets/img2.png&quot; alt=&quot;alt text&quot; title=&quot;Simulator of UILabel conforming to width of text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here’s a snippet of how you can make your UILabel conform to the width of your text.&lt;/p&gt;

&lt;p&gt;You want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;.sizeToFit()&lt;/code&gt; on your UILabel, otherwise you’d have to hardcode  your label’s width in the &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController {
	override func viewDidLoad() {
		super.viewDidLoad()

		let myCoolUILabel = UILabel()
		myCoolUILabel.text = &quot;My Cool Label&quot;
		myCoolUILabel.backgroundColor = UIColor.orange
 		myCoolUILabel.frame = CGRect(x: 100, y: 100, width: 30, height: 30)
		myCoolUILabel.sizeToFit()
		self.view.addSubview(myCoolUILabel)
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;So, no more of this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2016-12-23-assets/img1.png&quot; alt=&quot;alt text&quot; title=&quot;Simulator of UILabel not conforming to width of text&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/swift/uilabel/snippet/2016/12/13/Swift-Make-UILabel-conform-to-length-of-text.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uilabel/snippet/2016/12/13/Swift-Make-UILabel-conform-to-length-of-text.html</guid>
        
        
        <category>swift</category>
        
        <category>uilabel</category>
        
        <category>snippet</category>
        
      </item>
    
  </channel>
</rss>
