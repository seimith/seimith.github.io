<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>// some random weekend blog (seimith.github.io)</title>
    <description>This is a collection of some random thoughts, #TILs, and some tips for myself.
</description>
    <link>http://seimith.github.io/</link>
    <atom:link href="http://seimith.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 18 Nov 2017 19:44:42 -0800</pubDate>
    <lastBuildDate>Sat, 18 Nov 2017 19:44:42 -0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>So I Started Using VIM</title>
        <description>&lt;p&gt;So I recently started using VIM and now I can’t stop typing &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt; whenever I want to close random browser windows.&lt;/p&gt;

&lt;p&gt;Here are the VIM plugins I’ve been using:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;VIM Plug&lt;/a&gt; - for adding VIM plugins&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/nerdtree&quot;&gt;Nerd Tree&lt;/a&gt; - VIM tree view&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Xuyuanp/nerdtree-git-plugin&quot;&gt;Nerd Tree Git&lt;/a&gt; - git plugin to view git status in tree view&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mattn/emmet-vim/&quot;&gt;Emmet&lt;/a&gt; - for fast HTML &amp;amp; CSS&lt;/p&gt;

&lt;p&gt;And some basic VIM commands that I think everybody needs to know! :-)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt; - to close, “quit”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt; - to save, “write”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt; - to save and then close&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:q!&lt;/code&gt; - to force close, “quit”, without saving, “writing”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:u&lt;/code&gt; - to “undo” your last command&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:sort&lt;/code&gt; - to sort&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; - to visually select&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; - to “delete”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; - to copy, “yank”&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; - to “past”&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Nov 2017 13:02:00 -0800</pubDate>
        <link>http://seimith.github.io/vim/snippet/2017/11/11/so-I-started-using-vim.html</link>
        <guid isPermaLink="true">http://seimith.github.io/vim/snippet/2017/11/11/so-I-started-using-vim.html</guid>
        
        
        <category>vim</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Programmatically Segue</title>
        <description>&lt;p&gt;Using the code from my previous post on segues, here’s a snippet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func segueToPublisher () {
  let customSegueGoToRightScene = CustomSegueGoToRightScene(identifier: &quot;CustomSegueGoToRightScene&quot;, source: self, destination: PublisherViewController())
  customSegueGoToRightScene.perform()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 04 Nov 2017 11:15:00 -0700</pubDate>
        <link>http://seimith.github.io/swift/segue/snippet/2017/11/04/Swift-Programmatically-Segue.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/segue/snippet/2017/11/04/Swift-Programmatically-Segue.html</guid>
        
        
        <category>swift</category>
        
        <category>segue</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>Launch Sublime in Terminal</title>
        <description>&lt;p&gt;Launch Sublime: &lt;code class=&quot;highlighter-rouge&quot;&gt;subl&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Launch an entire folder: &lt;code class=&quot;highlighter-rouge&quot;&gt;subl .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Launch a particular file: &lt;code class=&quot;highlighter-rouge&quot;&gt;subl blah.xxx&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/subl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 21 Oct 2017 17:15:00 -0700</pubDate>
        <link>http://seimith.github.io/tip/sublime/text-editor/ternimal/2017/10/21/Launch-Sublime.html</link>
        <guid isPermaLink="true">http://seimith.github.io/tip/sublime/text-editor/ternimal/2017/10/21/Launch-Sublime.html</guid>
        
        
        <category>tip</category>
        
        <category>sublime</category>
        
        <category>text-editor</category>
        
        <category>ternimal</category>
        
      </item>
    
      <item>
        <title>(Swift) Stop Using the Storyboard</title>
        <description>&lt;p&gt;I started learning &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt; about three months ago and when I started I used the &lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;. This post will be a snippet of how you can stop using the &lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;The major benefit of not using the &lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt; is not having messy merge conflicts. Long story short, the &lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt; file is a fairly large &lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt; file and every time you open it something changes. Every time, you change a controller, or every time you add an &lt;code class=&quot;highlighter-rouge&quot;&gt;IBOutlet&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;IBAction&lt;/code&gt; something changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within your &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate.swift&lt;/code&gt;, specify the &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; frame.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var window: UIWindow? = UIWindow(frame: UIScreen.main.bounds)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, in your &lt;code class=&quot;highlighter-rouge&quot;&gt;application&lt;/code&gt; function you can specify your main view controller to be something else.&lt;/p&gt;

&lt;p&gt;In this example below, I’ve created some other view controller, called &lt;code class=&quot;highlighter-rouge&quot;&gt;NewViewController&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&amp;gt; Bool {
  let startingViewController = NewViewController()
  self.window!.rootViewController = startingViewController
  window!.makeKeyAndVisible()
  return true
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you can delete your &lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard.main&lt;/code&gt; file. However, when you build and run your project at this point, you might get an error like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;Could not find a storyboard named &#39;Main&#39; in bundle NSBundle.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If this happens, navigate to your &lt;code class=&quot;highlighter-rouge&quot;&gt;info.plist&lt;/code&gt; and delete the following entry:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Main storyboard file base name | String | Main
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hard clean and rebuild and you should see your new view controller.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Feb 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/storyboard/snippet/2017/02/19/Swift-Stop-Using-the-Storyboard.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/storyboard/snippet/2017/02/19/Swift-Stop-Using-the-Storyboard.html</guid>
        
        
        <category>swift</category>
        
        <category>storyboard</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Layout Constraints</title>
        <description>&lt;p&gt;A whiles back ago I was trying to learn how &lt;code class=&quot;highlighter-rouge&quot;&gt;constraints&lt;/code&gt; work. Today, I still have no idea what the heck is going on.&lt;/p&gt;

&lt;p&gt;While learning, I can across a bunch of tutorials that helped. However, I don’t remember what blog I particularly liked.&lt;/p&gt;

&lt;p&gt;This post contains a couple of classes that I made to help me add constraints to &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViews&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-02-19-assets/hero.gif&quot; alt=&quot;Visual debug view of layout constraints and stacking constraints&quot; title=&quot;Visual debug view of layout constraints and stacking constraints&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;layouting&quot;&gt;Layouting&lt;/h2&gt;

&lt;p&gt;Below is a class named &lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt; with a static function &lt;code class=&quot;highlighter-rouge&quot;&gt;setupConstraint&lt;/code&gt; that accepts the following parameters that lets me layer &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViews&lt;/code&gt; that have either fixed or flexible widths and heights&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;forView: UIView &lt;code class=&quot;highlighter-rouge&quot;&gt;// What UIView do you want to add constraints to?&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;top: Int? = nil &lt;code class=&quot;highlighter-rouge&quot;&gt;// Top padding&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;bottom: Int? = nil &lt;code class=&quot;highlighter-rouge&quot;&gt;// Bottom padding; Negative integer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;left: Int? = nil &lt;code class=&quot;highlighter-rouge&quot;&gt;// Left padding&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;right: Int? = nil &lt;code class=&quot;highlighter-rouge&quot;&gt;// Right padding; Negative integer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;height: Int? = nil &lt;code class=&quot;highlighter-rouge&quot;&gt;Specified height&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;fixedHeight: Bool = false &lt;code class=&quot;highlighter-rouge&quot;&gt;// Boolean defaulted to false; If you want a fixed UIView, give it a height (above)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;width: Int? = nil &lt;code class=&quot;highlighter-rouge&quot;&gt;// Specified width &lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;fixedWidth: Bool = false &lt;code class=&quot;highlighter-rouge&quot;&gt;// Boolean defaulted to false; If you want a fixed UIView, give it a width (above)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;selfView: UIViewController &lt;code class=&quot;highlighter-rouge&quot;&gt;// What is the UIViewController&#39;s view?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class Layout {
  static func setupConstraint (forView: UIView, top: Int?=nil, bottom: Int?=nil, left: Int?=nil, right: Int?=nil, height: Int?=nil, fixedHeight: Bool = false, width: Int?=nil, fixedWidth: Bool = false, selfView: UIViewController) {

    var parentViewController: UIView? {
        return selfView.view
    }

    forView.translatesAutoresizingMaskIntoConstraints = false //USING AUTOLAYOUT NOT FRAMES

    var l = NSLayoutConstraint() // LEFT
    var r = NSLayoutConstraint() // RIGHT
    var t = NSLayoutConstraint() // TOP
    var b = NSLayoutConstraint() // BOTTOM

    if (left != nil) {
        l = forView.leadingAnchor.constraint(equalTo: (parentViewController?.leadingAnchor)!, constant: CGFloat(left!)) // LEFT
    }

    if (right != nil) {
        r = forView.trailingAnchor.constraint(equalTo: (parentViewController?.trailingAnchor)!, constant: CGFloat(right!)) // RIGHT
    }

    if (top != nil) {
        t = forView.topAnchor.constraint(equalTo: (parentViewController?.topAnchor)!, constant: CGFloat(top!)) // TOP
    }

    if (bottom != nil) {
        b = forView.bottomAnchor.constraint(equalTo: (parentViewController?.bottomAnchor)!, constant: CGFloat(bottom!)) // BOTTOM
    }

    if (fixedHeight) {
        // FIXED HEIGHT
        let h = forView.heightAnchor.constraint(equalToConstant: CGFloat(height!))
        parentViewController?.addConstraints([t, b, l, r, h])
    } else if (fixedWidth) {
        // FIXED WIDTH
        let w = forView.widthAnchor.constraint(equalToConstant: CGFloat(width!))
        parentViewController?.addConstraints([t, b, l, r, w])
    } else if (fixedHeight == false &amp;amp;&amp;amp; fixedWidth == false) {
        // VARIABLE HEIGHT &amp;amp; WIDTH
        parentViewController?.addConstraints([t, b, l, r])
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;flexible-height-and-width-with-constraints-on-top-right-bottom-and-left&quot;&gt;Flexible Height and Width With Constraints on Top, Right, Bottom, and Left&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-02-19-assets/img1.gif&quot; alt=&quot;A Cyan UIView that retains its shape in portrait and landscape mode&quot; title=&quot;A Cyan UIView that retains its shape in portrait and landscape mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is an example of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; with constraints on the &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bottom&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; side. When you rotate your simulator, the shape of the &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; is flexible and the constraints, or fake margin, remain constant.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myCyanUIView = UIView()
myCyanUIView.backgroundColor = UIColor.cyan
self.view.addSubview(myCyanUIView)
// Add layout constraint after adding my subview
Layout.setupConstraint(forView: myCyanUIView,
  top: 50,
  bottom: -50,
  left: 50,
  right: -50,
  //height: 0, // I don&#39;t want a fixed height, so I can give this an arbitrary number or remove this paramater
  fixedHeight: false, // &amp;lt;===
  //width: 0, // I don&#39;t want a fixed width, so I can give this an arbitrary number or remove this paramater
  fixedWidth: false, // &amp;lt;===
  selfView: self)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;fixed-width-with-constraints-on-top-bottom-and-left&quot;&gt;Fixed Width With Constraints on Top, Bottom, and Left&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-02-19-assets/img2.gif&quot; alt=&quot;A red UIView that retains its shape in portrait and landscape mode&quot; title=&quot;A red UIView that retains its shape in portrait and landscape mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This example is of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; “pegged” to the left side of the viewport. The height will vary upon the orientation of the device.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myRedUIView = UIView()
myRedUIView.backgroundColor = UIColor.red
self.view.addSubview(myRedUIView)
// Add layout constraint after adding my subview
Layout.setupConstraint(forView: myRedUIView,
  top: 75,
  bottom: -75,
  left: 75,
  right: nil, // &amp;lt;=== I want my UIView to be fixed on the left side
  //height: 0,
  fixedHeight: false, // &amp;lt;=== With no fixed height
  width: 100, // &amp;lt;=== With a fixed width
  fixedWidth: true, // &amp;lt;=== So, I set this to true
  selfView: self)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;fixed-height-with-constraints-on-right-bottom-and-left&quot;&gt;Fixed Height With Constraints on Right, Bottom, and Left&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-02-19-assets/img3.gif&quot; alt=&quot;A green UIView that retains its shape in portrait and landscape mode&quot; title=&quot;A green UIView that retains its shape in portrait and landscape mode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This example is of a &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView&lt;/code&gt; “pegged” to the bottom side of the viewport. The height is fixed and the width will vary upon the orientation of the device.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myGreenUIView = UIView()
myGreenUIView.backgroundColor = UIColor.green
self.view.addSubview(myGreenUIView)
// Add layout constraint after adding my subview
Layout.setupConstraint(forView: myGreenUIView,
  top: nil, // &amp;lt;===
  bottom: -100,
  left: 100,
  right: -100,
  height: 100, // &amp;lt;===
  fixedHeight: true,
  //width: 100, // &amp;lt;=== I want flexible width
  fixedWidth: false, // &amp;lt;=== I want flexible width
  selfView: self)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;stacking&quot;&gt;Stacking&lt;/h2&gt;

&lt;p&gt;This class, &lt;code class=&quot;highlighter-rouge&quot;&gt;Stack&lt;/code&gt;, lets me stack &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViews&lt;/code&gt;. The private function accepts the following parameters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;views: &lt;code class=&quot;highlighter-rouge&quot;&gt;[UIView]&lt;/code&gt; // Array of &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViews&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;axis: &lt;code class=&quot;highlighter-rouge&quot;&gt;UILayoutConstraintAxis&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;distribution: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackViewDistribution&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;alignment: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIStackViewAlignment&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;spacing: &lt;code class=&quot;highlighter-rouge&quot;&gt;Int? = 0&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;selfView: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;parentContainer: &lt;code class=&quot;highlighter-rouge&quot;&gt;UIView? = nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can use this in conjunction with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt; class above.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class Stack {
    static func setupConstraints (views: [UIView], axis: UILayoutConstraintAxis, distribution: UIStackViewDistribution, alignment: UIStackViewAlignment, spacing: Int?=0, selfView: UIViewController, parentContainer: UIView?=nil) {

        var parentViewController: UIView! {
            return selfView.view
        }

        var pContainer = UIView()
        if (parentContainer != nil) {
            pContainer = parentContainer!
        } else {
            pContainer = parentViewController
        }

        let stackView = UIStackView()
        stackView.axis = axis
        stackView.distribution = distribution
        stackView.alignment = alignment
        stackView.spacing = CGFloat(spacing!)

        for view in views {
            var height = Int()
            var width = Int()

            if (view.frame.size.height != 0.0 &amp;amp;&amp;amp; view.frame.size.width != 0.0) {
                height = Int(view.frame.size.height)
                width = Int(view.frame.size.width)
            } else {
                height = 100
                width = 100
            }
            stackView.addArrangedSubview(view)
            view.heightAnchor.constraint(equalToConstant: CGFloat(height)).isActive = true
            view.widthAnchor.constraint(equalToConstant: CGFloat(width)).isActive = true
        }

        stackView.translatesAutoresizingMaskIntoConstraints = false;
        parentViewController.addSubview(stackView)

        // Constraints FOR NESTING LOCATION
        let l = stackView.leadingAnchor.constraint(equalTo: pContainer.leadingAnchor)
        let t = stackView.topAnchor.constraint(equalTo: pContainer.topAnchor)
        parentViewController.addConstraints([l, t])
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once you add this &lt;code class=&quot;highlighter-rouge&quot;&gt;stacking&lt;/code&gt; class to your project, you can consume it like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let myYellowUIView = UIView()
myYellowUIView.backgroundColor = UIColor.yellow

let myOrangeUIView = UIView()
myOrangeUIView.backgroundColor = UIColor.orange

let myBlueUIView = UIView()
myBlueUIView.backgroundColor = UIColor.blue

Stack.setupConstraints(views: [myYellowUIView, myOrangeUIView, myBlueUIView],
  axis: .horizontal,
  distribution: .fill,
  alignment: .leading,
  spacing: 20,
  selfView: self,
  parentContainer: myYellowUIView)

Layout.setupConstraint(forView: myYellowUIView,
  top: 50,
  //bottom: nil,
  left: 20,
  //right: nil,
  height: 100,
  fixedHeight: true,
  width: 100,
  fixedWidth: true,
  selfView: self)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unfortunately, I’m personally not very excited about the stacking because I didn’t flesh it out yet.&lt;/p&gt;

&lt;p&gt;All it appears to be doing is what you can do when setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;frame&#39;s&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CGRect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-02-19-assets/img4.png&quot; alt=&quot;Three UIViews that are stacked horizontally&quot; title=&quot;Three UIViews that are stacked horizontally&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can get the storyboard project is in &lt;a href=&quot;https://github.com/seimith/SwiftAddConstraints&quot;&gt;this repo&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 04 Feb 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/constraints/layout/stacking/uiview/2017/02/04/Swift-Layout-Constraints.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/constraints/layout/stacking/uiview/2017/02/04/Swift-Layout-Constraints.html</guid>
        
        
        <category>swift</category>
        
        <category>constraints</category>
        
        <category>layout</category>
        
        <category>stacking</category>
        
        <category>uiview</category>
        
      </item>
    
      <item>
        <title>(Swift) Detect Typing</title>
        <description>&lt;p&gt;Here’s a snippet on how to detect typing on your &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt; app. It’s pretty simple because we’re utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextViewDelegate&lt;/code&gt; delegate. Aka, built in success - thank you &lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This snippet is pretty short. See below for some code that will print out text when you type.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController, UITextViewDelegate {

  // 1. Creating a UITextView
  let myTextArea = UITextView(frame: CGRect(x: 30, y: 30, width: 200, height: 200))

  override func viewDidLoad() {
    super.viewDidLoad()

    // 2. You need this; setting delegate to self
    myTextArea.delegate = self

    // 3. Adding color and adding my UITextView to my controller&#39;s view
    myTextArea.backgroundColor = UIColor.gray
    self.view.addSubview(myTextArea)
  }

  override func didReceiveMemoryWarning() {
    super.didReceiveMemoryWarning()
    // Dispose of any resources that can be recreated.
  }

  // 4. Detection; printing out the text typed
  func textViewDidChange (_ textView: UITextView) {
    // Your code here.
    print(&quot;===== Text:&quot;, textView.text)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/keyboard/handler/snippet/2017/01/28/Swift-Detect-Keyboard-Typing.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/keyboard/handler/snippet/2017/01/28/Swift-Detect-Keyboard-Typing.html</guid>
        
        
        <category>swift</category>
        
        <category>keyboard</category>
        
        <category>handler</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Creating a UITableView</title>
        <description>&lt;p&gt;Here’s a snippet on how to make a &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;. Check out the code below!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import UIKit

class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {

    var myCoolTableView = UITableView()
    var myCoolIdentifier = &quot;myCoolCell&quot;
    let items : [String] = [
        &quot;Item Uno&quot;,
        &quot;Item Deux&quot;,
        &quot;Item Three&quot;,
        &quot;Item Four&quot;,
        &quot;Item Cinco&quot;
    ]

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        // Get main screen bounds
        let screenSize: CGRect = UIScreen.main.bounds
        let screenWidth = screenSize.width
        let screenHeight = screenSize.height

        myCoolTableView.dataSource = self
        myCoolTableView.delegate = self
        myCoolTableView.register(UITableViewCell.self, forCellReuseIdentifier: myCoolIdentifier)

        myCoolTableView.frame = CGRect(x: 0, y: 25, width: screenWidth, height: screenHeight);
        self.view.addSubview(myCoolTableView)
    }


    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
        return items.count
    }

    func tableView(_ cellForRowAttableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {
        let cell = myCoolTableView.dequeueReusableCell(withIdentifier: myCoolIdentifier, for: indexPath)
        cell.textLabel?.text = self.items[indexPath.row]
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        print(&quot;========== Selected:&quot;, (items[indexPath.row]), &quot;@&quot;, indexPath.row)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/uitableview/snippet/2017/01/28/Swift-Creating-a-UITableView.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/uitableview/snippet/2017/01/28/Swift-Creating-a-UITableView.html</guid>
        
        
        <category>swift</category>
        
        <category>UITableView</category>
        
        <category>snippet</category>
        
      </item>
    
      <item>
        <title>(Swift) Adding Audio</title>
        <description>&lt;p&gt;Utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;AudioToolbox&lt;/code&gt; and make a class, &lt;code class=&quot;highlighter-rouge&quot;&gt;Sound&lt;/code&gt;, to pass in the filename of you audio file and it’s type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swift 3.0&lt;/li&gt;
  &lt;li&gt;Xcode Version 8.0&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import AudioToolbox

class Sound {

    var soundEffect: SystemSoundID = 0
    init (name: String, type: String) {
        let path  = Bundle.main.path(forResource: name, ofType: type)!
        let pathURL = NSURL(fileURLWithPath: path)
        AudioServicesCreateSystemSoundID(pathURL as CFURL, &amp;amp;soundEffect)
    }

    func play() {
        AudioServicesPlaySystemSound(soundEffect)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, call it like so:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
Sound(name: &quot;NameOfMyAudioFile&quot;, type: &quot;wav&quot;).play()
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/swift/audio/snippet/audiotoolbox/2017/01/28/Swift-Adding-Audio.html</link>
        <guid isPermaLink="true">http://seimith.github.io/swift/audio/snippet/audiotoolbox/2017/01/28/Swift-Adding-Audio.html</guid>
        
        
        <category>swift</category>
        
        <category>audio</category>
        
        <category>snippet</category>
        
        <category>AudioToolbox</category>
        
      </item>
    
      <item>
        <title>(App/Extension) The Great Suspender</title>
        <description>&lt;p&gt;I just started using this Chrome extension. It’s called &lt;code class=&quot;highlighter-rouge&quot;&gt;The Great Suspender&lt;/code&gt; and it timesout, or suspends, idle tabs in your browser to save memory and system resources. This is super great if you’re one of those people who have hundreds of tabs open but never seem to be able to get rid of them after days…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-14-assets/img1.png&quot; alt=&quot;The great suspender screenshot&quot; title=&quot;The great suspender screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://chrome.google.com/webstore/detail/the-great-suspender/klbibkeccnjlkjkiokjodocebajanakg?hl=en&quot;&gt;The Great Suspender&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Jan 2017 02:33:33 -0800</pubDate>
        <link>http://seimith.github.io/app/tabs/chrome/extension/2017/01/14/The-Great-Suspender.html</link>
        <guid isPermaLink="true">http://seimith.github.io/app/tabs/chrome/extension/2017/01/14/The-Great-Suspender.html</guid>
        
        
        <category>app</category>
        
        <category>tabs</category>
        
        <category>chrome</category>
        
        <category>extension</category>
        
      </item>
    
      <item>
        <title>3D Printing</title>
        <description>&lt;p&gt;I recently began fiddling around with 3D printing. In hind site, I should’ve started about a year ago because I had access to a 3D printer. Unfortunately, life happened and I never got around to it. Until now. :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/13Large.gif&quot; alt=&quot;Animated image of Tinkerine DittoPro printing&quot; title=&quot;Animated image of Tinkerine DittoPro printing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The 3D printing machines that I have access to are the &lt;code class=&quot;highlighter-rouge&quot;&gt;FormLabs Form 1+&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tinkerine DittoPro&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;FormLabs Form 1+&lt;/code&gt; machine requires a UV curing resin. This means that there is a detachable well that holds the liquid (this can potentially lead to hot mess if you’re not careful enough). Also, the fumes are moderately strong so there is a protective case around the machine.&lt;/p&gt;

&lt;p&gt;The actual printing takes place upside down. This sounds cool, however, this can also lead to some potential problems if you want to print out a heavier object. What happens during this process is that the resin cures via UV lasers as the base of the printing platform and the solids adhere to an arm that slowly moves up. So as the arm moves up, the item that’s printing gets suspended in the air.&lt;/p&gt;

&lt;p&gt;When you’ve completed your printing, you have to physically remove the base of the arm and then pry off your item. At this point, your item might still be malleable and it’ll definitely be goopy from residual resin. This process is definitely not dry. After you pry it off, which can be rather difficult, you’ll need to let it sit in a 91% alcohol bath for a few more minutes (some more fumes).&lt;/p&gt;

&lt;p&gt;I don’t have any videos or images of it because it was messy for me, but you can definitely Google it. The printing is pretty slow because of the curing that occurs inside of the resin tank.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Tinkerine DittoPro&lt;/code&gt;, on the other hand, requires a malleable filament (imagine something like a glue gun). You feed the filament, or “ink”, into the machine and the “ink” gets extruded out and guided into the shape of your item via some special arm at the top of the machine.&lt;/p&gt;

&lt;p&gt;I personally found the Tinkerine DittoPro to be very intuitive to use because there were no extra steps to it. All I had to do was load my &lt;code class=&quot;highlighter-rouge&quot;&gt;.g&lt;/code&gt; file via an SD card and print.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to 3D Print on FormLab 1+ or Tinkerine DittoPro&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create vector (ex Sketch)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/1.png&quot; alt=&quot;Example of Sketch being used for vector drawing&quot; title=&quot;Example of Sketch being used for vector drawing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Save vector as an .esp file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/2.png&quot; alt=&quot;Example of exporting vectors as an .esp file&quot; title=&quot;Example of exporting vectors as an .esp file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 3: Open 3D software (ex Rhino 5) and import your .esp file&lt;/p&gt;

&lt;p&gt;Step 4: Convert your imported vector into a layer and then extrude, bool diff, and/or union&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/3.png&quot; alt=&quot;Example of using Rhino 5 to transform vectors into surfaces&quot; title=&quot;Example of using Rhino 5 to transform vectors into surfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/4.png&quot; alt=&quot;Example of using Rhino 5 to extrude surfaces&quot; title=&quot;Example of using Rhino 5 to extrude surfaces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/7.png&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/6.png&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/7.png&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/8.gif&quot; alt=&quot;Example of using Rhino 5 to preform a boolean diff&quot; title=&quot;Example of using Rhino 5 to preform a boolean diff&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Select your object and export as .stl&lt;/p&gt;

&lt;p&gt;Step 6: Import your .stl file in 3D printing program (ex Tinkerine DittoPro or FormLabs PreForm)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/10.png&quot; alt=&quot;Tinkerine DittoPro printing software&quot; title=&quot;Tinkerine DittoPro printing software&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/11.png&quot; alt=&quot;FormLabs PreForm printing software&quot; title=&quot;FormLabs PreForm printing software&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Step 7: Either print via the FormLabs Form 1+ (connect with usb) or save your project as a &lt;code class=&quot;highlighter-rouge&quot;&gt;.g&lt;/code&gt; file and put it on an SD card that can be plugged into the Tinkerine DittoPro&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/seimith/seimith.github.io/master/_assets/2017-01-13-assets/13Large.gif&quot; alt=&quot;Animated image of Tinkerine DittoPro printing&quot; title=&quot;Animated image of Tinkerine DittoPro printing&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jan 2017 07:22:15 -0800</pubDate>
        <link>http://seimith.github.io/3d/printing/formlabs/formlabs%20form%201+/tinkerine/dittopro/2017/01/13/3D-Printing.html</link>
        <guid isPermaLink="true">http://seimith.github.io/3d/printing/formlabs/formlabs%20form%201+/tinkerine/dittopro/2017/01/13/3D-Printing.html</guid>
        
        
        <category>3D</category>
        
        <category>printing</category>
        
        <category>FormLabs</category>
        
        <category>FormLabs Form 1+</category>
        
        <category>Tinkerine</category>
        
        <category>DittoPro</category>
        
      </item>
    
  </channel>
</rss>
